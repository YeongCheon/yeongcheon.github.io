<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>김영천 블로그</title><link>https://yeongcheon.github.io/</link><description>Recent content on 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>&amp;copy; Copyright 2020 YeongCheon</copyright><lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>angular universal 메모리 누수 개선하기 - 002</title><link>https://yeongcheon.github.io/posts/2021-07-15-angular-memory-leak002/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-07-15-angular-memory-leak002/</guid><description>앵귤러 기반 웹사이트를 개발하면서 발생한 메모리 누수의 다양한 원인들과 그 해결법을 기록합니다.
들어가며 이번 문서에서는 rxjs 쓰다보면 흔하게 접할 수 있는 메모리 누수에 대해 알아보고 eslint와 until-destroy를 이용해 메모리 누수를 원천적으로 막을 수 있는 방법에 대해 알아봅시다. 이 문서는 rxjs, eslint에 대해 기본적인 이해가 있다는 것을 전제로 작성되었습니다.
Bad Case 다음은 흔하게 작성하는 앵귤러 컴포넌트 코드입니다.
1 2 3 4 5 6 7 8 9 10 11 12 @Component({ selector: &amp;#39;app-a&amp;#39;, templateUrl: &amp;#39;.</description></item><item><title>angular universal 메모리 누수 개선하기 - 001</title><link>https://yeongcheon.github.io/posts/2021-07-11-angular-memory-leak001/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-07-11-angular-memory-leak001/</guid><description>앵귤러 기반 웹사이트를 개발하면서 발생한 메모리 누수의 다양한 원인들과 그 해결법을 기록합니다.
들어가며 부끄럽지만 앵귤러 기반 웹 프로젝트를 진행하며 메모리 누수같은 문제는 사실 전혀 신경을 안(못)쓰고 있었습니다. 어차피 사용자 브라우저에서 돌아가니깐 새로고침만 하면 해당 페이지의 메모리는 초기화될테니 속도만 느리지 않다면 된다는 생각이었지요. 당연히 이는 크게 잘못된 생각이었고 서버사이드 렌더링(이하 SSR)를 적용하면서 문제는 상당히 심각하게 흘러갑니다. 지금부터 제가 개발하면서 만나본 다양한 메모리 누수(memory leak) 문제를 살펴보고 그 해결법을 기록하고자 합니다.</description></item><item><title>코로나 방문자 수기명부 개인정보 수집제공 동의서 양식</title><link>https://yeongcheon.github.io/posts/2021-05-07-covid-visitor-list/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-05-07-covid-visitor-list/</guid><description>자영업을 하고 계시는 부모님 의뢰로 코로나 방문자 수기명부 개인정보 수집제공 동의서 양식을 작성해서 공유합니다.</description></item><item><title>cloud function 호출 시 context의 중요성에 대해 알아보자.</title><link>https://yeongcheon.github.io/posts/2021-02-05-cloud-function-context-problem/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-02-05-cloud-function-context-problem/</guid><description>예전 글에서 언급한 imagick-cf를 테스트 하는 도중 마주한 알 수 없는 특이한 오류와 이를 해결했던 과정을 기록합니다.
문제 url을 통해서 함수를 실행하면 최초 실행 후 일정 시간동안은 몇번을 호출하든 결과가 정상적으로 반환합니다. 하지만 이후 500 에러를 반환하기 시작합니다. 심지어 이 전에 정상적으로 반환했던 url을 그대로 호출해도 500 error를 반환하는 어처구니 없는 모습을 보여줍니다. 게다가 500 에러를 반환하는 경우엔 로그조차 남지 않아서 원인을 지레짐작으로 파악할 수 밖에 없는 상황입니다.</description></item><item><title>git hooks 안되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2021-02-03-fix-git-hooks-not-working/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-02-03-fix-git-hooks-not-working/</guid><description>What 필자는 프로젝트에서 commit을 하기 전에 lint 명령어를 이용해서 코드 스타일을 관리하고 있습니다. 초기에는 commit을 하기 전에 직접 수동으로 lint를 실행해서 코드를 점검해왔지만 아무래도 사람이 하는지라 종종 까먹고 lint 실행을 까먹는 경우가 발생하였습니다. 이 후 이 동작들을 자동화 하기 위해서 git hooks의 pre-commit을 이용하여 자동화를 시켜놨는데 집에서 사용하는 랩탑에서는 pre-commit이 동작하지 않는 문제가 발생하였습니다. 이를 해결하기 위해 열심히 구글링을 해봤지만 답이 나오지 않아 직접 이것저걸 삽질을 진행하다가 문제를 해결하여 이를 기록하고자 합니다.</description></item><item><title>emacs에서 svg 수정 안되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2021-02-01-emacs-image-mode-edit-bug/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-02-01-emacs-image-mode-edit-bug/</guid><description>이맥스에서 svg 파일을 열면 기본적으로 image-mode가 활성화 된 상태로 파일이 열립니다. 이 때 버퍼는 svg 코드가 아니라 렌더링 된 이미지를 보여줍니다. 이미지가 아니라 코드를 보고싶을 경우엔 C-c C-c 단축키를 이용해서 버퍼 상태를 전환해야 합니다. 대부분의 코드 보기 상태에서 별도의 조치 없이 바로 코드 작업을 할 수 있지만 간혹 코드 수정이 안되는 경우가 있습니다. 원인이야 다양할 수 있지만 저같은 경우엔 editorconfig-mode가 문제였습니다. 아래는 제 .emacs 파일의 일부입니다. editorconfig-mode가 기본적으로 활성화 되도록 설정되어 있습니다.</description></item><item><title>emacs에서 Typescript 개발환경 구축하기</title><link>https://yeongcheon.github.io/posts/2021-01-26-emacs-typescript-eslint-setting/</link><pubDate>Tue, 26 Jan 2021 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2021-01-26-emacs-typescript-eslint-setting/</guid><description>Typescript는 마이크로소프트(이하 MS)의 주도로 개발이 되고 있기 때문인지 Vscode에서 아주 편안하게 개발이 가능합니다. 사실 이번 글에서 주로 사용할 lsp-mode도 MS에서 개발한 LSP에 기반하여 작성된 모드입니다. 이 외에도 css languag server 등등 많은 부분을 MS에서 작성한 프로그램에 의존하고 있는데 이쯤되면 그냥 속편하게 Vscode를 쓰는게 낫지 않을까 싶지만 몇년동안 정들었던 이맥스를 포기하기엔 아쉬움이 많이 남기에 Typescript 개발환경 구축 방법을 기록하고자 합니다. 이 글은 다음과 같은 내용을 기준으로 작성되었습니다.
emacs 27.</description></item><item><title>Cloud Functions로 실시간 이미지 리사이징 하기</title><link>https://yeongcheon.github.io/posts/2021-01-06-image-resize-cloud-function/</link><pubDate>Wed, 06 Jan 2021 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2021-01-06-image-resize-cloud-function/</guid><description>당근마켓, 비트윈 등에서 작성한 글을 참고하여 GCP 기반으로 비슷한 기능을 하는 코드를 작성하여 봅시다. 동작 원리는 앞서 말한 글에 자세히 나와있으니 서론은 생략하고 바로 시작합니다.
이 문서에서는 GCP의 아래 제품들을 사용합니다.
Cloud Functions
Cloud Stroage
Cloud CDN
Cloud Storage 실제 이미지들이 저장될 storage bucket을 생성해야 합니다. 여기선 특별할게 없으니 공식 가이드로 대체합니다.
Cloud Functions 코드 수정 및 배포 Cloud Function을 호출하는 방법은 여러가지가 있습니다만 이 문서에서는 http 요청을 통해 호출하는 방법을 사용합니다.</description></item><item><title>HTML의 download 속성</title><link>https://yeongcheon.github.io/posts/2020-11-26-html-download-property/</link><pubDate>Sat, 28 Nov 2020 22:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-11-26-html-download-property/</guid><description> 특정 파일을 바로 다운받을 수 있는 download 속성에 대해 알아봅시다. 사실 별 내용 없고 그냥 안까먹을 목적으로 작성하는 중입니다. 이 문서보다는 여기가 더 보기 좋아요.
1 &amp;lt;a href=&amp;#34;https://imageURL.com&amp;#34; download&amp;gt;download image&amp;lt;/a&amp;gt;</description></item><item><title>코틀린으로 작성된 스프링 기반 API 트랜잭션 rollback 관리</title><link>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</link><pubDate>Tue, 08 Sep 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</guid><description>Kotlin + Spring boot을 조합해 작성한 REST API에서 CheckedException이 발생해도 Rollback이 되지 않는 문제와 그 해결법에 대해 알아봅시다. 이 글은 Spring, RDB, JPA에 대한 기본적인 이해가 있다는 가정 하에 작성되었습니다.
Checked Exception? 우선 Checked Exception에 대해서 알아봅시다. Kotlin에서 Exception은 크게 두가지로 나눌 수 있습니다.
Checked Exception: 컴파일 시 체크되는 예외입니다. Runtime Exception에 해당되지 않는 모든 Exception은 Checked Exception이 됩니다.
Runtime(Unchecked) Exception: 컴파일 단계에서 체크되지 않으며(Unchecked) 실행 중(Runtime) 발생하는 예외입니다(Ex: IndexOutOfBoundsException, IllegalArgumentException, etc…).</description></item><item><title>about me</title><link>https://yeongcheon.github.io/about/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/about/</guid><description> 안녕하세요. 웹 개발자에요. 크리에이터와 팬들의 소통 커뮤니티 쉘터를 개발하고 있어요. 어렵네요.
Email kyc1682@gmail.com
dev@shelter.id
👍 Like Angular
Emacs
Firebase
GCP
Golang
Kotlin
ORM(JPA)
Spring
Typescript
Ubuntu
Web</description></item><item><title>tinode series.003 - API document</title><link>https://yeongcheon.github.io/posts/2020-07-26-tinode-chat-api-doc-translate-ko/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-07-26-tinode-chat-api-doc-translate-ko/</guid><description>매번 영어문서 보기 빡쳐서 직접 번역기 돌려가며 쓰는 번역본. 번역기와 의역, 오역 범벅입니다. 가급적이면 공식 문서를 보세요.
Server API How it works? Tinode는 IM 라우터이자 스토어입니다. 발행-구독 모델 컨셉을 대략적으로 따릅니다.
서버는 세션, 사용자, 그리고 토픽을 연결합니다. 세션은 클라이언트 프로그램과 서버 간의 네트워크 연결을 의미합니다. 사용자는 세션을 서버에 연결하는 사람을 의미합니다. 토픽은 세션들끼리 콘텐츠를 주고받는 통신 채널입니다.
사용자가 토픽은 각각 고유한 ID가 할당됩니다. 사용자 ID는 &amp;#39;usr&amp;#39; 문자로 시작하는 base64-URL 인코딩 6비트 랜덤 문자로 이루어져 있습니다(예: usr2il9suCbuko).</description></item><item><title>gRPC를 웹브라우저에 호출해보자(a.k.a Typescript)</title><link>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</link><pubDate>Fri, 12 Jun 2020 22:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</guid><description>목표 브라우저에서 rpc를 호출하고 싶습니다. 하지만 2020년 7월 기준으로 브라우저에서 gRPC의 rpc를 직접 호출하는 건 불가능합니다. 그치만 envoy Proxy와 함께라면 가능합니다. 이 문서에서는 grpc-web을 이용해 생성된 Typescript 파일을 이용해 server streaming rpc를 호출하는 방법을 설명합니다. 서버는 Go, 클라이언트는 Typescript 언어를 사용합니다.
proto 파일 작성 특정 채팅방에 접속해서 server stream을 얻는 rpc를 작성해봅시다. 양방향 스트림이 아니라 서버사이드 스트림으로 한 이유는 현재 grpc-web에서는 양방향 스트림을 지원하지 않기 때문입니다(클라이언트 스트림도 지원하지 않습니다).</description></item><item><title>gRPC interceptor</title><link>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</link><pubDate>Sat, 30 May 2020 12:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</guid><description>이 문서는 grpc-go Interceptor 문서를 번역한 것입니다(대부분 번역기 발췌, 작성자는 영어를 되게 못해요).
Interceptor gRPC는 clientConn/server 단위로 인터셉터를 구현하고 설치할 수 있는 간단한 API를 제공합니다. 인터셉터는 각 RPC 호출을 중간에서 가로채는 역할을 합니다. 사용자는 인터셉터를 사용하여 로깅, 인증/권한부여, 메트릭 수집 등 RPC 전체를 아우르는 공용 기능을 수행할 수 있습니다.
Try it 1 go run server/main.go 1 go run client/main.go Explanation gRPC에서 인터셉터는 RPC 호출 유형에 따라 크게 두 가지로 구분할 수 있습니다.</description></item><item><title>hugo에서 수학 수식 표현하기</title><link>https://yeongcheon.github.io/posts/2020-05-22-org-latex/</link><pubDate>Fri, 22 May 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-22-org-latex/</guid><description>이 글은 여기저기를 참고해서 작성되었습니다.
목표 이 문서에는 hugo + org mode + kaTex 를 조합해서 글을 작성하는 법을 설명합니다. hugo와 org mode는 이미 사용 중이라고 가정하고 hugo에 kaTex를 설정하는 법을 중점적으로 설명합니다.
Installation kaTex math.html 파일 생성 hugo에서 kaTex를 사용하려면 kaTex 모듈을 불러와야 합니다. /layouts/partials/math.html 파일을 생성하고 아래의 내용을 추가합니다. 혹시 이미 math.html 파일명을 사용중이라면 다른 파일명으로 바꿔서 생성해도 상관없어요.
1 2 3 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.</description></item><item><title>이맥스에서 특정 명령어 단축키로 지정하기</title><link>https://yeongcheon.github.io/posts/2020-05-18-emacs-configure-shortcut/</link><pubDate>Mon, 18 May 2020 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-18-emacs-configure-shortcut/</guid><description>이맥스에서 단축키를 직접 설정하는 법을 알아봅시다. 아는 게 없어서 여기 저기 참고를 많이 했어요.
기본 사용법 제일 단순한 예제를 먼저 살펴봅시다.
1 2 3 4 5 6 7 (global-set-key (kbd &amp;#34;M-a&amp;#34;) &amp;#39;backward-char) ; Alt+a (global-set-key (kbd &amp;#34;C-a&amp;#34;) &amp;#39;backward-char) ; Ctrl+a (global-set-key (kbd &amp;#34;C-c t&amp;#34;) &amp;#39;backward-char) ; Ctrl+c t (global-set-key (kbd &amp;#34;&amp;lt;f7&amp;gt; &amp;lt;f8&amp;gt;&amp;#34;) &amp;#39;whitespace-mode) ; F7 F8 딱히 설명이 필요 없을 정도로 간단하지만 굳이 첨언을 하자면 모든 buffer에서 사용할 수 있는 단축키를 지정할때는 위와 같이 사용합니다.</description></item><item><title>이맥스에서 여러 파일 찾아 바꾸기</title><link>https://yeongcheon.github.io/posts/2020-05-13-emacs-search-and-replace/</link><pubDate>Wed, 13 May 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-13-emacs-search-and-replace/</guid><description>대부분의 편집기에서 기본적으로 Ctrl + Shift + h 단축키에 해당하는 파일에서 찾기/바꾸기 기능을 emacs에서 사용해보자.
단축키 요약 구구절절 설명하기 전에 우선 단축키 요약본을 보자
1 2 3 4 C-x d (Dired mode 실행) Q (찾기/바꾸기 실행) Y (모든 변경 내역 승인) C-x s ! (모든 변경 내역 저장) step by step Dired mode 실행 C-x d : emacs에 기본적으로 탑재된 dired mode 를 실행해보자.</description></item><item><title>구글 앱엔진에 ssr angular app 배포하기</title><link>https://yeongcheon.github.io/posts/2020-04-26-angular-ssr-with-appengine/</link><pubDate>Sun, 26 Apr 2020 16:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-04-26-angular-ssr-with-appengine/</guid><description>들어가며 이 문서는 기본적으로 앵귤러 공식 SSR 가이드를 따라하며 학습한 내용을 정리한 것입니다. SSR에 대해 궁금하시다면 이 링크를 참고하세요. 이 문서는 angular, appEngine을 사용할 줄 아는 사람을 대상으로 작성되었습니다.
프로젝트 생성 우선 앵귤러 프로젝트를 하나 생성해봅시다. 이 예제는 angular9 버전을 기준으로 작성되었습니다.
1 ng new test-project express-engine 추가 생성된 프로젝트 내부에서 아래의 명령어를 실행합니다.
1 ng add @nguniversal/express-engine 명령어를 성공적으로 실행했다면 아래의 파일이 추가되었을 것입니다.</description></item><item><title>grpc-gateway를 이용한 JSON 통신</title><link>https://yeongcheon.github.io/posts/2020-04-15-grpc-build-with-googleapis/</link><pubDate>Wed, 15 Apr 2020 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-04-15-grpc-build-with-googleapis/</guid><description>목표 grpc-gateway를 이용한 통신을 하기 위해 작성한 .proto 파일을 컴파일 하는 방법을 알아보겠습니다.
source code 우선 컴파일 하고자 하는 소스코드를 살펴봅시다. 이 코드는 grpc-gateway에 있는 예제와 동일합니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 syntax = &amp;#34;proto3&amp;#34;;package example;// myService.proto import &amp;#34;google/api/annotations.proto&amp;#34;;message StringMessage { string value = 1;}service YourService { rpc Echo(StringMessage) returns (StringMessage) { option (google.</description></item><item><title>프로토 버퍼 언어 안내(proto3) 번역본</title><link>https://yeongcheon.github.io/posts/2020-03-24-proto-buffers-language-guide-proto3/</link><pubDate>Tue, 24 Mar 2020 22:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-03-24-proto-buffers-language-guide-proto3/</guid><description>매번 영어문서 보기 빡쳐서 직접 번역기 돌려가며 쓰는 번역본. 번역기와 의역, 오역 범벅입니다. 가급적이면 공식 문서를 보세요.
Language Guide(proto3) Defining A Message Type 우선 매우 간단한 예제를 살펴보겠습니다.. 검색 요청을 위한 메세지 타입을 정의하고자 하는데 이 메세지는 쿼리 문자열(역자 주: query), 요청 페이지(역자 주: page_number), 그리고 페이지당 결과 갯수(역자 주: result_per_page)를 가지고 있습니다. 1 2 3 4 5 6 7 syntax = &amp;#34;proto3&amp;#34;;message SearchRequest { string query = 1; int32 page_number = 2; int32 result_per_page = 3;} 첫 번째 줄은 이 파일이 proto3 문법을 사용하고 있음을 나타냅니다.</description></item><item><title>emacs에서 내가 사용중인 모든 패키지 업그레이드 하기</title><link>https://yeongcheon.github.io/posts/2020-03-08-emacs-all-package-upgrade/</link><pubDate>Sun, 08 Mar 2020 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-03-08-emacs-all-package-upgrade/</guid><description>업그레이드 방법 별거 없다. 글을 길게 쓸 생각(능력)은 없지만 이마저도 읽기 싫은 사람은 그냥 아래의 명령어만 쓰자.
1 2 3 M-x package-list-packages U x Step by Step 패키지 목록 화면으로 들어가기 M-x package-list-packages 를 입력하면 이맥스를 지원하는 다양한 종류의 패키지를 볼 수 있다.
이후 모든 과정들은 위에 보이는 패키지 목록 버퍼에서 진행된다.
내가 사용중인 모든 패키지 선택하기 패키지 목록 버퍼에서 알파벳 대문자 U 를 입력하면 현재 내가 사용중인 모든 패키지가 선택된다.</description></item><item><title>kotlin에서 조건문(blcok문)변수 제대로 쓰기</title><link>https://yeongcheon.github.io/posts/2020-01-26-kotlin-setting-condition-variable/</link><pubDate>Sun, 26 Jan 2020 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-01-26-kotlin-setting-condition-variable/</guid><description>기본 문법 if 사용법 kotlin에서는 if, when, try catch문을 활용해서 변수에 값을 편하게 할당할 수 있다. 예를 들어서 자바에서 아래와 같이 쓰는 문법이 있다고 해보자.
1 2 3 4 5 6 7 8 9 10 11 // java code String name; if(true) { name = &amp;#34;YeongCheon&amp;#34; } else { name = null } // 또는 삼항 연산자로 처리할수도 있다. name = true ? &amp;#34;YeongCheon&amp;#34; : null 위와 동일한 문법을 코틀린에서는 아래처럼 쓸 수 있다.</description></item><item><title>emacs에 $PATH 환경변수 인식 시키기</title><link>https://yeongcheon.github.io/posts/2020-01-08-emacs-path-setting/</link><pubDate>Wed, 08 Jan 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-01-08-emacs-path-setting/</guid><description>Intro 나는 우분투에서 이맥스를 즐겨쓰고 있다. 이맥스에서 고 언어를 종종 쓰는데 이번에 노트북을 셋팅하면서 문제가 발생했다. 일단 나는 이맥스에서 개발할 때 주로 lsp-mode를 바탕으로 개발환경을 구성하는데, 기본적인 설정은 문서를 보고 구성하면 무리없이 따라할 수 있다. 이번 글에서는 가이드대로 다 따라했는데 이맥스에서 gopls를 인식하지 못하던 문제에 대한 해결법을 기록하고자 한다.
문제 상황 lsp-mode를 사용하면 각 언어에 해당하는 language server를 이용해서 문법 점검, 자동완성, 디버거 연동 등등 IDE에서 흔하게 지원해주는 기능을 사용할 수 있게 해준다.</description></item><item><title>JPA OneToMany 필드의 StackOverflowError</title><link>https://yeongcheon.github.io/posts/2019-11-14-jpa-one-to-many-collection-set/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-11-14-jpa-one-to-many-collection-set/</guid><description>JPA를 사용하다 보면 StackOverflow 에러를 종종 만날 수 있다. 이 글에서는 필드 타입이 Set인 Collection 타입에 아이템을 추가할 경우 StackVoerflow 에러가 발생하는 원인과 그 해결법에 대해 알아보자.
`hashcode`, `equals` 메서드와 관계된 이야기이다.
에러 발생 시나리오 구현 목표 부모객체와 자식객체들을 서버 데이터베이스에 저장하는 기능을 가진 코드가 있었다. 부모객체와 자식객체는 1:n관계로서 하나의 부모가 여러 개의 자식을 가질 수 있고 이 두 객체는 서로의 존재를 알고 있는 양방향 관계다.</description></item><item><title>IntelliJ 업데이트 후 appengine local 실행 이슈 해결하기</title><link>https://yeongcheon.github.io/posts/2019-08-05-intellij-appengine-error/</link><pubDate>Mon, 05 Aug 2019 23:20:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-08-05-intellij-appengine-error/</guid><description>IntelliJ를 쓰기 시작한지 아직 1년도 안됐지만 거의 분기(?)마다 자동 업데이트가 되는듯 싶은데 이때마다 잘 쓰고있던 appengine local server가 제대로 동작하지 않아서 화가 났었는데 최근에 명확한 솔루션을 찾았기에 이를 기록하고자 한다.
내가 그동안 해왔던 삽질 목록은 아래와 같다.
로컬서버 설정 삭제 후 재셋팅
rebuild(clean) project
cloud code 플러그인 삭제 후 재설치
intelliJ 삭제 후 재설치(…)
위에 내용들 다 쓸모없으니 따라하지 않아도 된다.</description></item><item><title>이맥스에서 lsp-mode를 이용해 자바 개발환경 셋팅하기</title><link>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</link><pubDate>Sun, 30 Jun 2019 21:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</guid><description>이맥스에서 자바 개발환경을 셋팅해보자. 우선 기본적으로 이맥스와 자바, gradle 등등은 설치가 되어있다고 가정한다. 포스트 작성 기준은 아래와 같다.
OS: ubuntu 18.04 LTS
emacs: GNU Emacs 25.2.2
java: openjdk version &amp;#34;1.8.0_212&amp;#34;
gradle: Gradle 4.10.2
이 포스트에선 개발환경 셋팅을 위해서 lsp-mode를 이용할 예정이다. 본격적으로 셋팅하기에 앞어서 lsp가 무엇인지 간단하게 한번 알아보자
LSP란? lsp는 Language Server Protocol의 약자이다(링크를 보는게 훨씬 도움이 된다).</description></item><item><title>이맥스 폰트, 세벌식 셋팅하기</title><link>https://yeongcheon.github.io/posts/2019-06-19-emacs-hangul/</link><pubDate>Wed, 19 Jun 2019 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-06-19-emacs-hangul/</guid><description> 아래의 내용을 .emacs 파일 안에 복붙해주자. 세벌식 버전은 최종이 아닌 390버전이다.
1 2 3 4 5 6 7 (set-fontset-font t &amp;#39;hangul (font-spec :family &amp;#34;D2Coding&amp;#34;)) (set-language-environment &amp;#34;Korean&amp;#34;) (prefer-coding-system &amp;#39;utf-8) (setq default-input-method &amp;#34;korean-hangul390&amp;#34;) (setq default-korean-keyboard &amp;#34;390&amp;#34;) (global-set-key (kbd &amp;#34;&amp;lt;S-kana&amp;gt;&amp;#34;) &amp;#39;toggle-input-method)</description></item><item><title>tinode series.002 - Install &amp; Run</title><link>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</link><pubDate>Tue, 28 May 2019 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</guid><description>서론 소스코드를 살펴보기에 앞서서 일단 프로그램 실행을 시켜보자. 이 글에서 설명하는 예제는 커밋 아이디 기준 2558db90a50c80c974c2fccfec6b87ea44e4758b을 바탕으로 설명한다. 사실 이 글을 안봐도 여기를 따라하면 보통을 무난하게 설치 및 실행을 할 수 있다. 이 가이드는 공식 가이드 중 Building from Source, Mysql을 기준으로 설명한다.
실행환경 및 선행조건 Ubuntu 18.04 LTS
Golang이 설치되어 있어야 한다(기준 버전 : 1.12.5).
Mysql이 설치되어 있어야 한다(기준 버전: 5.</description></item><item><title>tinode series.001 - Intro</title><link>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</link><pubDate>Thu, 07 Mar 2019 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</guid><description>인스턴스 메시징? 요즘에는 어느 서비스를 이용하든 대부분 실시간 채팅은 기본으로 지원한다. 페이스북, 트위터같은 서비스는 물론이고 트위치, 유튜브 같은 동영상 기반 플랫폼도 실시간 채팅을 기본적으로 지원한다. 사실 과거에 2G폰에서 문자메세지를 주고받던 시절부터 현재 카카오톡, 텔레그램같은 실시간 인스턴트 메세징 앱에 이르기까지 플랫폼의 변화만 있을 뿐 글자를 이용한 실시간 의사소통은 현대인에게 상당히 익숙한 의사소통 방법이다.
우리 서비스에 적용하고 싶어(어떻게?) 운영중인 서비스에 인스턴스 메시징 기능을 적용하면 여러가지 이점이 많다. 빠른 의사소통은 물론 사용자의 서비스 체류시간 및 접속빈도 증가 등등.</description></item><item><title>hugo + org-mode + github를 이용해 블로그 셋팅하기</title><link>https://yeongcheon.github.io/posts/2019-03-03-github+hugo+orgmode_setup/</link><pubDate>Sun, 03 Mar 2019 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-03-03-github+hugo+orgmode_setup/</guid><description>hugo + github + org-mode를 이용해 블로그를 운영하는 법을 알아보자. github에 hugo를 올리는 방법은 웹에 가이드가 이미 많이 있기 때문에 이 포스트에서는 org-mode를 이용해 hugo에 글을 어떻게 쓰는지를 중점적으로 설명한다.
hugo를 적용하게 된 계기 orgmode에 대한 호기심 원래 jekyll + github 조합으로 블로그를 운영하고 있었다. github 블로그를 운영할 때 가장 대중적인 조합이고 나 초기 셋팅이 좀 번거로웠던거 빼곤 불만이 없었기에 그대로 사용하고 있었다. 블로그에 포스트를 작성할 때 markdown을 이용해서 글을 작성했었는데 최근에 emacs의 킬러 콘텐츠로 불리는 org-mode에 관심이 가기 시작했다.</description></item><item><title>jackson을 이용해 json 변환 시 JPA entity의 id값만 추출하기</title><link>https://yeongcheon.github.io/posts/2019-03-01-jpa-jackson/</link><pubDate>Fri, 01 Mar 2019 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-03-01-jpa-jackson/</guid><description>들어가며 REST API 서버를 java언어에서 사용되는 대표적인 json(또는 xml, yaml, etc…) 라이브러리인 jackson 은 kotlin에서도 사용이 가능하다. JPA를 사용하다보면 entity를 json형식으로 반환할 때 해당 entity가 다른 entity를 필드로 참조하고 있을 경우 참조하는 entity의 id값만을 반환하고 싶을 경우가 있다. 이 문제를 jackson을 이용해 json형식으로 이쁘게 변환하는 법을 알아보자.
요구사항 데이터베이스에는 현재 user 테이블과 shelter 테이블이 존재한다. shelter 테이블에는 user 테이블을 참조는 외래키 제약조건이 걸려있다. 자세한 내용은 다음 섹션의 소스코드를 참고해보자.</description></item><item><title>appengine + springboot + kotlin + jpa + cloudsql 연동하기</title><link>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</link><pubDate>Sun, 11 Nov 2018 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</guid><description>회사에서 새로 시작하는 API 서버 개발에 아래와 같은 환경을 적용하기로 했다.
구동환경 : Google App Engine Standard Environment 언어 : kotlin 1.3 framework : Spring Boot 2.0.2.RELEASE DB : cloud sql(MySQL 5.7) ORM : hibernate/JPA IDE: IntelliJ Ultimate 각각 놓고보면 다들 유명하고 널리 쓰이는 기술들이지만 얘들을 한꺼번에 적용한 가이드라인이 없어서 내가 직접 가이드를 작성해볼까 한다. A to Z 형식의 가이드는 아니고 셋팅 중 삽질을 크게 했던 부분 위주로 작성해보도록 하겠다.</description></item><item><title>emacs에서 커서이동 없이 buffer 전체 복사하기</title><link>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</link><pubDate>Thu, 27 Sep 2018 21:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</guid><description>보편적인 현대 에디터에서 ctrl-a ctrl-c, 그러니까 현재 편집중인 파일의 모든 내용을 선택해서 복사하는 방법을 이맥스에서 사용하는 방법을 알아보자.
원래는 어떻게 쓰고 있었어요? 내가 원래 쓰던 방법은 커서를 버퍼 최상단으로 이동시킨 뒤 마크 세팅, 그리고 커서를 버퍼 마지막으로 이동시킨 뒤 복사하는 방법을 사용했었다. 단축키로 표현하자면 아래와 같다.
M - &amp;lt;, M - SPC, M - &amp;gt;, M - w
이 방법을 사용하면 복사 자체는 문제가 없지만 커서가 항상 버퍼 마지막에 위치하게 된다는 문제가 있다.</description></item><item><title>emacs에서 tslint 이용하기</title><link>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</link><pubDate>Fri, 21 Sep 2018 12:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</guid><description>나는 angular6를 이용해 웹 프로젝트를 진행하는걸 선호하는데 툴은 emacs를 주로 쓰고있다(OS는 ubuntu). vscode를 쓸까 했는데 그냥 이맥스가 좋아서(이유는 없다) 이맥스에 꾸역꾸역 개발환경을 구축했다. tide를 이용해서 환경을 구성했는데 tslint가 작동하지 않아서 잠깐 했던 삽질을 여기에 짤막하게 기록한다.
vscode는 그냥 되던데? 이게 내가 헤매게 된 가장 큰 이유다. vscode는 마켓플레이스에 그냥 tslint 패키지를 내려받으면 알아서 잘 동작한다. 개발자가 따로 뭐 설정하고 해줄 필요가 없다.(물론 tslint.json이 필요하지만 angular 프로젝트는 생성 시 지가 알아서 만들어준다.</description></item><item><title>S2 library를 이용하여 가까운 위치의 사용자 찾기</title><link>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</link><pubDate>Sun, 05 Aug 2018 18:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</guid><description>구글에서 제공하는 S2 라이브러리를 이용하여 현재 내 위치에서 가장 가까운 사용자 목록을 추출해보자. 서버 환경은 GAE, golang standard environment 이다. 이 글을 참고했다.
S2 라이브러리란? S2 라이브러리는 구글에서 비공식적으로(not an official) 제공하는 구(球)형상 라이브러리이다(번역기 발췌). 기존의 대다수 라이브러리는 2차원 평면을 기준으로 좌표시스템을 구축하였지만 S2 라이브러리는 3차원 구를 기준으로 좌표계를 사용한다. 실제 지구는 평면보단 구(球)에 훨씬 가깝기 때문에 좀 더 정교하고 왜곡없는 지리 데이터베이스를 구축할 수 있다(이 역시 번역기 발췌).
추가로 geohash와 비교해보면 도움이 많이 된다.</description></item><item><title>Google App Engine Image API 삽질 후기</title><link>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</link><pubDate>Sun, 10 Jun 2018 12:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</guid><description>오늘은 GAE에서 제공하는 Image API를 사용하면서 겪은 어려움과 후기를 공유하고자 한다.
요구사항 GAE를 통해 업로드 된 이미지를 Google Cloud Storage(이하 GCS)에 보관, 파일 관련 정보를 datastore에 별도로 저장한다(업로드 한 사용자, 업로드 파일명, 업로드 날짜 등등). 이 이미지를 웹사이트를 통해 서비스를 하고싶다. 이 이미지는 사이즈가 모두 제각각인데 DSLR로 찍은 수십메가짜리 이미지부터 조그마한 썸네일 이미지까지 크기가 천차만별이다. 동일한 이미지를 여러가지 사이즈로 출력해야 한다. 가령 DSLR로 찍은 이미지를 제공할 경우 우선 100px짜리 썸네일로 제공, 사용자가 썸네일을 클릭할 경우 이미지의 원본을 보여주고 싶다.</description></item><item><title>datastore에서 projection query 실행 시 time.Time이 int64로 반환되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</link><pubDate>Sat, 12 May 2018 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</guid><description>요구사항 datastore에 내 프로필을 방문한 사용자의 ID와 방문시간을 각각 string, time.Time 형식으로 저장하고 있다. 구조체로 보면 다음과 같다.
1 2 3 4 5 type Visitor struct { UserId string //조회한 프로필의 Id VisitorId string //방문자 Id VisitTime time.Time } 이 데이터를 단순히 조회하면 한 사용자가 나를 여러번 방문할 경우 결과 리스트에 그 방문자가 여러번 출력된다. 나는 동일한 사용자가 여러번 반복해도 가장 최근에 방문한 기록만 보길 원했다.</description></item><item><title>Googlde App Engine(GAE) datastore index 관련 에러 해결하기</title><link>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</link><pubDate>Sun, 29 Apr 2018 21:30:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</guid><description>들어가며 google app engine을 이용해 REST API를 작성하던 중 발생했던 datastore의 index 관련 이슈와 그 해결법에 대해 기록한다. 참고, 여기도 참고
에러발생 상황 내 프로필을 조회한 사람들의 목록을 반환해주는 API를 작성했다. 코드는 딱히 별거 없고 그냥 datastore에 있는 데이터들을 불러오는 내용이다. 핵심코드는 아래와 같다.
1 q := datastore.NewQuery(userDao.VisitorEntity).Filter(&amp;#34;UserId=&amp;#34;, userId).Order(&amp;#34;-VisitTime&amp;#34;) UserId 필드의 값을 기준으로 필터링을 하고 VisitTime을 최근순으로 정렬하는 간단한 코드다. 위 쿼리문을 베이스로 한 API는 로컬테스트는 무사히 통과하고 배포까지 정상적으로 완료, 이 후 클라우드에 올라간 API를 테스트 했는데 다음과 같은 에러로그를 내뿜었다.</description></item><item><title>emacs 명령어 목록</title><link>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</link><pubDate>Sun, 04 Feb 2018 00:30:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</guid><description>emacs 명령어 목록 이맥스를 쓰면서 개인적으로 유용하게 쓰고있는 명령어 리스트, 대부분 M-x를 누른 후 실행한다.
common grep : grep을 이용한 문자열 검색 (lgrep, rgrep도 있다.). 위키링크
find-name-dired : 특정 폴더 아래에서 지정된 파일이름 패턴과 동일한 목록을 뽑아 dired모드로 출력해주는 명령어. 폴더 아래의 모든 파일에서 replace 명령어를 수행할 때 유용하다. 링크
특정폴더 아래의 모든 파일(하위폴더 포함)에서 replace를 실행하는 방법
M-x find-name-dired 명령어 실행 후 폴더 지정, 파일패턴 지정 t를 눌러서 dired 모드에 있는 모든 목록을 선택 Q를 눌러서 Query-Replace in Files.</description></item><item><title>emacs 단축키 목록</title><link>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</link><pubDate>Tue, 26 Dec 2017 16:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</guid><description>emacs 단축키 목록 아래의 단축키들은 그누 이맥스 시작하기(한빛미디어) 책을 보면서 정리한 내용들입니다.
common C-x s : 모든 버퍼 저장(y, n 또는 !) C-x C-q : 버퍼 읽기/쓰기 전용상태로 swap C-x C-x : 선택영역 끝간 이동 C-t : 글자 순서 바꾸기(toggle) M-t : 단어 순서 바꾸기 C-x C-t : 문장 순서 바꾸기 M-c : 단어의 첫 글자만 대문자로 바꾸기 M-u : 한 단어를 대문자로 바꾼다. M-l : 한 단어를 소문자로 바꾼다.</description></item><item><title>Google App Engine(GAE)에서 go swagger server 실행하기</title><link>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</link><pubDate>Tue, 05 Dec 2017 17:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</guid><description>Intro [지난번 포스트][last-post]에서 습득한 지식을 바탕으로 go-swagger를 이용해 작성한 서버를 Google App Engine(이하 GAE)에서 실행시켜보자.
spec을 이용해 서버코드 생성하기 [지난번 포스트][last-post]에서 작성한 swagger.yaml을 이용해 서버코드를 생성해보자. swagger.yaml 내용은 아래와 같다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 swagger: &amp;#34;2.0&amp;#34; info: description: hello go swagger title: hello world application version: 1.</description></item><item><title>go swagger 서버파일 구조 분석</title><link>https://yeongcheon.github.io/posts/2017-10-14-go-swagger02/</link><pubDate>Sat, 14 Oct 2017 14:50:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2017-10-14-go-swagger02/</guid><description>Intro 지난번 포스트에서 만든 hello world 프로젝트의 구성요소들을 분석해보자.
폴더 구조 ├── cmd │ └── helloworld-server │ └── main.go ├── github.com ├── golang.org ├── gopkg.in ├── models │ └── item.go ├── restapi │ ├── configure_helloworld.go │ ├── doc.go │ ├── embedded_spec.go │ ├── operations │ │ ├── get.go │ │ ├── get_parameters.go │ │ ├── get_responses.go │ │ ├── get_urlbuilder.go │ │ └── helloworld_api.go │ └── server.go └── swagger.</description></item><item><title>go swagger 사용법</title><link>https://yeongcheon.github.io/posts/2017-10-06-go-swagger01/</link><pubDate>Fri, 06 Oct 2017 11:40:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2017-10-06-go-swagger01/</guid><description>Intro 이 문서는 goswagger를 이용해 golang으로 작성된 간단한 REST API SERVER 프로그램을 만드는 방법을 설명한다. 개발환경은 ubuntu 16.04LTS, golang 1.8을 사용중이다.
이 문서를 작성하며 참고한 사이트는 아래와 같다. 사실 이 문서 안보고 아래 목록만 살펴봐도 된다.
swagger 공식 사이트 goswagger.io yundream님의 사이트, 상당히 정리가 잘 되어있다. 구글링&amp;hellip; goSwagger 설치 github 페이지의 README 파일을 보면 아래의 명령어를 쓰라고 한다.
echo &amp;quot;deb https://dl.bintray.com/go-swagger/goswagger-debian ubuntu main&amp;quot; | sudo tee -a /etc/apt/sources.</description></item></channel></rss>