<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orgs on YeongCheon Tech Blog</title>
    <link>https://yeongcheon.github.io/org/</link>
    <description>Recent content in Orgs on YeongCheon Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-ko</language>
    
	<atom:link href="https://yeongcheon.github.io/org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-03-01-jpa-jackson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-03-01-jpa-jackson/</guid>
      <description>들어가며 요구사항 REST API 서버를 java언어에서 사용되는 대표적인 json(또는 xml, yaml, etc...) 라이브러리인 jackson 은 kotlin에서도 사용이 가능하다. JPA를 사용하다보면 entity를 json형식으로 반환할 때 해당 entity가 다른 entity를 필드로 참조하고 있을 경우 참조하는 entity의 id값만을 반환하고 싶을 경우가 있다. 이 문제를 jackson을 이용해 json형식으로 이쁘게 변환하는 법을 알아보자. 데이터베이스에는 현재 user 테이블과 shelter 테이블이 존재한다. shelter 테이블에는 user 테이블을 참조는 외래키 제약조건이 걸려있다. 자세한 내용은 다음 섹션의 소스코드를 참고해보자.
현재 사용자가 shelter 정보를 조회하는 API를 호출할 경우 쉘터 정보 안에 쉘터 소유자의 상세한 정보가 포함되어 있다고 한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-03-03-github&#43;hugo&#43;orgmode_setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-03-03-github&#43;hugo&#43;orgmode_setup/</guid>
      <description>hugo + github + org-mode를 이용해 블로그를 운영하는 법을 알아보자. github에 hugo를 올리는 방법은 웹에 가이드가 이미 많이 있기 때문에 이 포스트에서는 org-mode를 이용해 hugo에 글을 어떻게 쓰는지를 중점적으로 설명한다.
hugo를 적용하게 된 계기 orgmode에 대한 호기심 jekyll에서 orgmode 적용 실패 원래 jekyll + github 조합으로 블로그를 운영하고 있었다. github 블로그를 운영할 때 가장 대중적인 조합이고 나 초기 셋팅이 좀 번거로웠던거 빼곤 불만이 없었기에 그대로 사용하고 있었다. 블로그에 포스트를 작성할 때 markdown을 이용해서 글을 작성했었는데 최근에 emacs의 킬러 콘텐츠로 불리는 org-mode에 관심이 가기 시작했다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-03-07-tinode001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-03-07-tinode001/</guid>
      <description>인스턴스 메시징? 요즘에는 어느 서비스를 이용하든 대부분 실시간 채팅은 기본으로 지원한다. 페이스북, 트위터같은 서비스는 물론이고 트위치, 유튜브 같은 동영상 기반 플랫폼도 실시간 채팅을 기본적으로 지원한다. 사실 과거에 2G폰에서 문자메세지를 주고받던 시절부터 현재 카카오톡, 텔레그램같은 실시간 인스턴트 메세징 앱에 이르기까지 플랫폼의 변화만 있을 뿐 글자를 이용한 실시간 의사소통은 현대인에게 상당히 익숙한 의사소통 방법이다.
우리 서비스에 적용하고 싶어(어떻게?) 운영중인 서비스에 인스턴스 메시징 기능을 적용하면 여러가지 이점이 많다. 빠른 의사소통은 물론 사용자의 서비스 체류시간 및 접속빈도 증가 등등.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-05-28-tinode002/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-05-28-tinode002/</guid>
      <description>서론 소스코드를 살펴보기에 앞서서 일단 프로그램 실행을 시켜보자. 이 글에서 설명하는 예제는 커밋 아이디 기준 2558db90a50c80c974c2fccfec6b87ea44e4758b을 바탕으로 설명한다. 사실 이 글을 안봐도 여기를 따라하면 보통을 무난하게 설치 및 실행을 할 수 있다. 이 가이드는 공식 가이드 중 Building from Source, Mysql을 기준으로 설명한다.
실행환경 및 선행조건 * Ubuntu 18.04 LTS
* Golang이 설치되어 있어야 한다(기준 버전 : 1.12.5).
* Mysql이 설치되어 있어야 한다(기준 버전: 5.7)
설치 및 실행하기 source 파일 내려받기 및 바이너리 파일 install 다음 명령어를 입력한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-06-19-emacs-hangul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-06-19-emacs-hangul/</guid>
      <description>아래의 내용을 .emacs 파일 안에 복붙해주자. 세벌식 버전은 최종이 아닌 390버전이다.
(set-fontset-font t &#39;hangul (font-spec :family &#34;D2Coding&#34;))
(set-language-environment &#34;Korean&#34;) (prefer-coding-system &#39;utf-8) (setq default-input-method &#34;korean-hangul390&#34;) (setq default-korean-keyboard &#34;390&#34;) (global-set-key (kbd &#34;&#34;) &#39;toggle-input-method)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeongcheon.github.io/org/2019-06-31-emcs-lsp-java-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeongcheon.github.io/org/2019-06-31-emcs-lsp-java-setup/</guid>
      <description>이맥스에서 자바 개발환경을 셋팅해보자. 우선 기본적으로 이맥스와 자바, gradle 등등은 설치가 되어있다고 가정한다. 포스트 작성 기준은 아래와 같다.
 OS: ubuntu 18.04 LTS emacs: GNU Emacs 25.2.2 java: openjdk version &amp;quot;1.8.0_212&amp;quot; gradle: Gradle 4.10.2  이 포스트에선 개발환경 셋팅을 위해서 lsp-mode를 이용할 예정이다. 본격적으로 셋팅하기에 앞어서 lsp가 무엇인지 간단하게 한번 알아보자
LSP란? lsp는 Language Server Protocol의 약자이다(링크를 보는게 훨씬 도움이 된다). 간단히 말하자면 각 개발툴마다 제각각 다뤄왔던 자동완성, jump to definition 등등의 기능을 하나의 프로토콜로 표준화 하여 하나의 language server를 여러 개발툴에서 동일하게 사용할 수 있도록 하는 규약(프로토콜)을 의미한다.</description>
    </item>
    
  </channel>
</rss>