<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 김영천 블로그</title>
    <link>https://yeongcheon.github.io/tags/golang/</link>
    <description>Recent content in golang on 김영천 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy; Copyright 2020 YeongCheon</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 22:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeongcheon.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gRPC를 웹브라우저에 호출해보자(a.k.a Typescript)</title>
      <link>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</link>
      <pubDate>Fri, 12 Jun 2020 22:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</guid>
      <description>목표  브라우저에서 rpc를 호출하고 싶습니다. 하지만 2020년 7월 기준으로 브라우저에서 gRPC의 rpc를 직접 호출하는 건 불가능합니다. 그치만 envoy Proxy와 함께라면 가능합니다. 이 문서에서는 grpc-web을 이용해 생성된 Typescript 파일을 이용해 server streaming rpc를 호출하는 방법을 설명합니다. 서버는 Go, 클라이언트는 Typescript 언어를 사용합니다.
  proto 파일 작성  특정 채팅방에 접속해서 server stream을 얻는 rpc를 작성해봅시다. 양방향 스트림이 아니라 서버사이드 스트림으로 한 이유는 현재 grpc-web에서는 양방향 스트림을 지원하지 않기 때문입니다(클라이언트 스트림도 지원하지 않습니다).</description>
    </item>
    
    <item>
      <title>gRPC interceptor</title>
      <link>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</link>
      <pubDate>Sat, 30 May 2020 12:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</guid>
      <description>이 문서는 grpc-go Interceptor 문서를 번역한 것입니다(대부분 번역기 발췌, 작성자는 영어를 되게 못해요).
Interceptor  gRPC는 clientConn/server 단위로 인터셉터를 구현하고 설치할 수 있는 간단한 API를 제공합니다. 인터셉터는 각 RPC 호출을 중간에서 가로채는 역할을 합니다. 사용자는 인터셉터를 사용하여 로깅, 인증/권한부여, 메트릭 수집 등 RPC 전체를 아우르는 공용 기능을 수행할 수 있습니다.
  Try it  1  go run server/main.go    1  go run client/main.go      Explanation  gRPC에서 인터셉터는 RPC 호출 유형에 따라 크게 두 가지로 구분할 수 있습니다.</description>
    </item>
    
    <item>
      <title>tinode series.002 - Install &amp; Run</title>
      <link>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</guid>
      <description>서론  소스코드를 살펴보기에 앞서서 일단 프로그램 실행을 시켜보자. 이 글에서 설명하는 예제는 커밋 아이디 기준 2558db90a50c80c974c2fccfec6b87ea44e4758b을 바탕으로 설명한다. 사실 이 글을 안봐도 여기를 따라하면 보통을 무난하게 설치 및 실행을 할 수 있다. 이 가이드는 공식 가이드 중 Building from Source, Mysql을 기준으로 설명한다.
  실행환경 및 선행조건    Ubuntu 18.04 LTS
  Golang이 설치되어 있어야 한다(기준 버전 : 1.12.5).
  Mysql이 설치되어 있어야 한다(기준 버전: 5.</description>
    </item>
    
    <item>
      <title>tinode series.001 - Intro</title>
      <link>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</link>
      <pubDate>Thu, 07 Mar 2019 19:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</guid>
      <description>인스턴스 메시징?  요즘에는 어느 서비스를 이용하든 대부분 실시간 채팅은 기본으로 지원한다. 페이스북, 트위터같은 서비스는 물론이고 트위치, 유튜브 같은 동영상 기반 플랫폼도 실시간 채팅을 기본적으로 지원한다. 사실 과거에 2G폰에서 문자메세지를 주고받던 시절부터 현재 카카오톡, 텔레그램같은 실시간 인스턴트 메세징 앱에 이르기까지 플랫폼의 변화만 있을 뿐 글자를 이용한 실시간 의사소통은 현대인에게 상당히 익숙한 의사소통 방법이다.
  우리 서비스에 적용하고 싶어(어떻게?)  운영중인 서비스에 인스턴스 메시징 기능을 적용하면 여러가지 이점이 많다. 빠른 의사소통은 물론 사용자의 서비스 체류시간 및 접속빈도 증가 등등.</description>
    </item>
    
    <item>
      <title>S2 library를 이용하여 가까운 위치의 사용자 찾기</title>
      <link>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</link>
      <pubDate>Sun, 05 Aug 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</guid>
      <description>구글에서 제공하는 S2 라이브러리를 이용하여 현재 내 위치에서 가장 가까운 사용자 목록을 추출해보자. 서버 환경은 GAE, golang standard environment 이다. 이 글을 참고했다.
S2 라이브러리란? S2 라이브러리는 구글에서 비공식적으로(not an official) 제공하는 구(球)형상 라이브러리이다(번역기 발췌). 기존의 대다수 라이브러리는 2차원 평면을 기준으로 좌표시스템을 구축하였지만 S2 라이브러리는 3차원 구를 기준으로 좌표계를 사용한다. 실제 지구는 평면보단 구(球)에 훨씬 가깝기 때문에 좀 더 정교하고 왜곡없는 지리 데이터베이스를 구축할 수 있다(이 역시 번역기 발췌).
추가로 geohash와 비교해보면 도움이 많이 된다.</description>
    </item>
    
    <item>
      <title>Google App Engine Image API 삽질 후기</title>
      <link>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</link>
      <pubDate>Sun, 10 Jun 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</guid>
      <description>오늘은 GAE에서 제공하는 Image API를 사용하면서 겪은 어려움과 후기를 공유하고자 한다.
요구사항  GAE를 통해 업로드 된 이미지를 Google Cloud Storage(이하 GCS)에 보관, 파일 관련 정보를 datastore에 별도로 저장한다(업로드 한 사용자, 업로드 파일명, 업로드 날짜 등등). 이 이미지를 웹사이트를 통해 서비스를 하고싶다. 이 이미지는 사이즈가 모두 제각각인데 DSLR로 찍은 수십메가짜리 이미지부터 조그마한 썸네일 이미지까지 크기가 천차만별이다. 동일한 이미지를 여러가지 사이즈로 출력해야 한다. 가령 DSLR로 찍은 이미지를 제공할 경우 우선 100px짜리 썸네일로 제공, 사용자가 썸네일을 클릭할 경우 이미지의 원본을 보여주고 싶다.</description>
    </item>
    
    <item>
      <title>datastore에서 projection query 실행 시 time.Time이 int64로 반환되는 문제 해결하기</title>
      <link>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</link>
      <pubDate>Sat, 12 May 2018 13:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</guid>
      <description>요구사항 datastore에 내 프로필을 방문한 사용자의 ID와 방문시간을 각각 string, time.Time 형식으로 저장하고 있다. 구조체로 보면 다음과 같다.
1 2 3 4 5  type Visitor struct { UserId string //조회한 프로필의 Id 	VisitorId string //방문자 Id 	VisitTime time.Time }   이 데이터를 단순히 조회하면 한 사용자가 나를 여러번 방문할 경우 결과 리스트에 그 방문자가 여러번 출력된다. 나는 동일한 사용자가 여러번 반복해도 가장 최근에 방문한 기록만 보길 원했다.</description>
    </item>
    
  </channel>
</rss>