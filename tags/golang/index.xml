<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - 태그 - 김영천 블로그</title><link>https://yeongcheon.github.io/tags/golang/</link><description>Golang - 태그 - 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 05 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/golang/" rel="self" type="application/rss+xml"/><item><title>cloud function 호출 시 context의 중요성에 대해 알아보자.</title><link>https://yeongcheon.github.io/posts/2021-02-05-cloud-function-context-problem/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2021-02-05-cloud-function-context-problem/</guid><description><![CDATA[<p>
<a href="/posts/2021-01-06-image-resize-cloud-function.html">예전 글</a>에서 언급한 <a href="https://github.com/YeongCheon/imagick-cf">imagick-cf</a>를 테스트 하는 도중 마주한 알 수 없는 특이한 오류와 이를 해결했던 과정을 기록합니다.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
문제
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<ol>
<li>url을 통해서 함수를 실행하면 최초 실행 후 일정 시간동안은 몇번을 호출하든 결과가 정상적으로 반환합니다. </li>
<li>하지만 이후 500 에러를 반환하기 시작합니다. 심지어 이 전에 정상적으로 반환했던 url을 그대로 호출해도 500 error를 반환하는 어처구니 없는 모습을 보여줍니다. </li>
<li>게다가 500 에러를 반환하는 경우엔 로그조차 남지 않아서 원인을 지레짐작으로 파악할 수 밖에 없는 상황입니다. </li>
<li>물론 local test시에는 매우 잘 동작합니다.</li>
</ol>
<p>절망하다가 차츰 화가 나기 시작합니다.</p>]]></description></item><item><title>tinode series.003 - API document</title><link>https://yeongcheon.github.io/posts/2020-07-26-tinode-chat-api-doc-translate-ko/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-07-26-tinode-chat-api-doc-translate-ko/</guid><description><![CDATA[<p>
매번 <a href="https://github.com/tinode/chat/blob/master/docs/API.md">영어문서</a> 보기 빡쳐서 직접 번역기 돌려가며 쓰는 번역본. <del>번역기와 의역, 오역 범벅입니다.</del> 가급적이면 <a href="https://github.com/tinode/chat/blob/master/docs/API.md">공식 문서</a>를 보세요.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Server API
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
How it works?
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Tinode는 IM 라우터이자 스토어입니다. 발행-구독 모델 컨셉을 대략적으로 따릅니다.</p>]]></description></item><item><title>gRPC를 웹브라우저에 호출해보자(a.k.a Typescript)</title><link>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</link><pubDate>Fri, 12 Jun 2020 22:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-06-12-grpc-for-web/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
목표
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>브라우저에서 rpc를 호출하고 싶습니다. 하지만 2020년 7월 기준으로 브라우저에서 gRPC의 rpc를 직접 호출하는 건 불가능합니다. 그치만 <a href="https://www.envoyproxy.io/">envoy Proxy</a>와 함께라면 가능합니다. <strong>이 문서에서는 grpc-web을 이용해 생성된 Typescript 파일을 이용해 <a href="https://grpc.io/docs/what-is-grpc/core-concepts/#server-streaming-rpc">server streaming rpc</a>를 호출하는 방법을 설명합니다.</strong> 서버는 <a href="https://go.dev/">Go</a>, 클라이언트는 <a href="https://www.typescriptlang.org/">Typescript</a> 언어를 사용합니다.</p>]]></description></item><item><title>gRPC interceptor</title><link>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</link><pubDate>Sat, 30 May 2020 12:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-05-30-grpc-interceptor/</guid><description><![CDATA[<p>
이 문서는 <a href="https://github.com/grpc/grpc-go/blob/master/examples/features/interceptor/README.md">grpc-go Interceptor 문서</a>를 번역한 것입니다(<del>대부분 번역기 발췌, 작성자는 영어를 되게 못해요</del>).</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Interceptor
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>gRPC는 clientConn/server 단위로 인터셉터를 구현하고 설치할 수 있는 간단한 API를 제공합니다. 인터셉터는 각 RPC 호출을 중간에서 가로채는 역할을 합니다. 사용자는 인터셉터를 사용하여 로깅, 인증/권한부여, 메트릭 수집 등 RPC 전체를 아우르는 공용 기능을 수행할 수 있습니다.</p>]]></description></item><item><title>tinode series.002 - Install &amp; Run</title><link>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</link><pubDate>Tue, 28 May 2019 00:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2019-05-28-tinode002/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
서론
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>소스코드를 살펴보기에 앞서서 일단 프로그램 실행을 시켜보자. 이 글에서 설명하는 예제는 커밋 아이디 기준 <a href="https://github.com/YeongCheon/chat/commit/2558db90a50c80c974c2fccfec6b87ea44e4758b">2558db90a50c80c974c2fccfec6b87ea44e4758b</a>을 바탕으로 설명한다. 사실 이 글을 안봐도 <a href="https://github.com/tinode/chat/blob/master/INSTALL.md">여기</a>를 따라하면 보통을 무난하게 설치 및 실행을 할 수 있다. 이 가이드는 공식 가이드 중 <a href="https://github.com/tinode/chat/blob/master/INSTALL.md#building-from-source">Building from Source</a>, Mysql을 기준으로 설명한다.</p>]]></description></item><item><title>tinode series.001 - Intro</title><link>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</link><pubDate>Thu, 07 Mar 2019 19:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2019-03-07-tinode001/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
인스턴스 메시징?
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>요즘에는 어느 서비스를 이용하든 대부분 실시간 채팅은 기본으로 지원한다. 페이스북, 트위터같은 서비스는 물론이고 트위치, 유튜브 같은 동영상 기반 플랫폼도 실시간 채팅을 기본적으로 지원한다. 사실 과거에 2G폰에서 문자메세지를 주고받던 시절부터 현재 카카오톡, 텔레그램같은 실시간 인스턴트 메세징 앱에 이르기까지 플랫폼의 변화만 있을 뿐 글자를 이용한 실시간 의사소통은 현대인에게 상당히 익숙한 의사소통 방법이다.</p>]]></description></item><item><title>S2 library를 이용하여 가까운 위치의 사용자 찾기</title><link>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</link><pubDate>Sun, 05 Aug 2018 18:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</guid><description><![CDATA[<p>구글에서 제공하는 <a href="http://s2geometry.io/" target="_blank" rel="noopener noreffer ">S2</a> 라이브러리를 이용하여 현재 내 위치에서 가장 가까운 사용자 목록을 추출해보자. 서버 환경은 <a href="https://cloud.google.com/appengine/docs/" target="_blank" rel="noopener noreffer ">GAE</a>, <a href="https://cloud.google.com/appengine/docs/standard/go/" target="_blank" rel="noopener noreffer ">golang standard environment</a> 이다. <a href="https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/" target="_blank" rel="noopener noreffer ">이 글</a>을 참고했다.</p>
<h2 id="s2-라이브러리란">S2 라이브러리란?</h2>
<p>S2 라이브러리는 구글에서 비공식적으로(<a href="https://github.com/google/s2geometry#disclaimer" target="_blank" rel="noopener noreffer ">not an official</a>) 제공하는 구(球)형상 라이브러리이다(<del>번역기 발췌</del>). 기존의 대다수 라이브러리는 2차원 평면을 기준으로 좌표시스템을 구축하였지만 S2 라이브러리는 3차원 구를 기준으로 좌표계를 사용한다. 실제 지구는 평면보단 구(球)에 훨씬 가깝기 때문에 좀 더 정교하고 왜곡없는 지리 데이터베이스를 구축할 수 있다(<del>이 역시 번역기 발췌</del>).</p>]]></description></item><item><title>Google App Engine Image API 삽질 후기</title><link>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</link><pubDate>Sun, 10 Jun 2018 12:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</guid><description><![CDATA[<p>오늘은 GAE에서 제공하는 <a href="https://cloud.google.com/appengine/docs/standard/go/images/" target="_blank" rel="noopener noreffer ">Image API</a>를 사용하면서 겪은 어려움과 후기를 공유하고자 한다.</p>
<h2 id="요구사항">요구사항</h2>
<ul>
<li>GAE를 통해 업로드 된 이미지를 <a href="https://cloud.google.com/go/getting-started/using-cloud-storage" target="_blank" rel="noopener noreffer ">Google Cloud Storage</a>(이하 GCS)에 보관, 파일 관련 정보를 datastore에 별도로 저장한다(업로드 한 사용자, 업로드 파일명, 업로드 날짜 등등). 이 이미지를 웹사이트를 통해 서비스를 하고싶다. 이 이미지는 사이즈가 모두 제각각인데 DSLR로 찍은 수십메가짜리 이미지부터 조그마한 썸네일 이미지까지 크기가 천차만별이다.</li>
<li>동일한 이미지를 여러가지 사이즈로 출력해야 한다. 가령 DSLR로 찍은 이미지를 제공할 경우 우선 100px짜리 썸네일로 제공, 사용자가 썸네일을 클릭할 경우 이미지의 원본을 보여주고 싶다.</li>
<li>사용자가 주로 모바일을 통해 서비스를 사용할것으로 예측되는데 사용자의 디바이스마다 최적화 된 크기의 이미지를 제공하고 싶다.</li>
</ul>
<h2 id="고민">고민</h2>
<p>위와 같은 요구사항을 충족시키기 위해 인터넷을 꽤 오래 뒤지고 다녔다. 처음에는 <a href="http://engineering.vcnc.co.kr/2016/05/ondemand-image-resizing/" target="_blank" rel="noopener noreffer ">비트윈의 블로그 글</a>을 보고 이걸 따라하면 되겠다 싶었다. 하지만 문제가 있었다. 이미지 업로드를 GAE에서 구현하다보니 <a href="https://github.com/chai2010/webp" target="_blank" rel="noopener noreffer ">이미지를 webp 형태로 변환하는 golang 라이브러리</a>를 쓸 수가 없었다. 마찬가지로 온디멘드 리사이징도 GAE 위에서 돌리기엔 문제가 좀 있었다(내가 해결책을 못 찾은걸수도 있다). 결국 며칠동안 고민만 하고 코드를 한줄도 작성을 못해서 일단 무식한 방법으로라도 구현을 해보기로 했다. 그래서 아래와 같은 방법을 후보로 선정했다.</p>]]></description></item><item><title>datastore에서 projection query 실행 시 time.Time이 int64로 반환되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</link><pubDate>Sat, 12 May 2018 13:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</guid><description><![CDATA[<h2 id="요구사항">요구사항</h2>
<p>datastore에 내 프로필을 방문한 사용자의 ID와 방문시간을 각각 <code>string</code>, <code>time.Time</code> 형식으로 저장하고 있다. 구조체로 보면 다음과 같다.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-go">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="복사하기"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Visitor</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UserId</span> <span class="kt">string</span> <span class="c1">//조회한 프로필의 Id</span>
</span></span><span class="line"><span class="cl">	<span class="nx">VisitorId</span> <span class="kt">string</span> <span class="c1">//방문자 Id</span>
</span></span><span class="line"><span class="cl">	<span class="nx">VisitTime</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>이 데이터를 단순히 조회하면 한 사용자가 나를 여러번 방문할 경우 결과 리스트에 그 방문자가 여러번 출력된다. 나는 동일한 사용자가 여러번 반복해도 가장 최근에 방문한 기록만 보길 원했다. 즉 datastore에서 SQL 문법의 <strong>group by</strong>를 사용하고 싶었다.  내 요구사항을 SQL로 표현하자면 아래와 같다.</p>]]></description></item></channel></rss>