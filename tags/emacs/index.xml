<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>emacs on 김영천 블로그</title><link>https://yeongcheon.github.io/tags/emacs/</link><description>Recent content in emacs on 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>&amp;copy; Copyright 2020 YeongCheon</copyright><lastBuildDate>Mon, 01 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>emacs에서 svg 수정 안되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2021-02-01-emacs-image-mode-edit-bug/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-02-01-emacs-image-mode-edit-bug/</guid><description>이맥스에서 svg 파일을 열면 기본적으로 image-mode가 활성화 된 상태로 파일이 열립니다. 이 때 버퍼는 svg 코드가 아니라 렌더링 된 이미지를 보여줍니다. 이미지가 아니라 코드를 보고싶을 경우엔 C-c C-c 단축키를 이용해서 버퍼 상태를 전환해야 합니다. 대부분의 코드 보기 상태에서 별도의 조치 없이 바로 코드 작업을 할 수 있지만 간혹 코드 수정이 안되는 경우가 있습니다. 원인이야 다양할 수 있지만 저같은 경우엔 editorconfig-mode가 문제였습니다. 아래는 제 .emacs 파일의 일부입니다. editorconfig-mode가 기본적으로 활성화 되도록 설정되어 있습니다.</description></item><item><title>emacs에서 Typescript 개발환경 구축하기</title><link>https://yeongcheon.github.io/posts/2021-01-26-emacs-typescript-eslint-setting/</link><pubDate>Tue, 26 Jan 2021 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2021-01-26-emacs-typescript-eslint-setting/</guid><description>Typescript는 마이크로소프트(이하 MS)의 주도로 개발이 되고 있기 때문인지 Vscode에서 아주 편안하게 개발이 가능합니다. 사실 이번 글에서 주로 사용할 lsp-mode도 MS에서 개발한 LSP에 기반하여 작성된 모드입니다. 이 외에도 css languag server 등등 많은 부분을 MS에서 작성한 프로그램에 의존하고 있는데 이쯤되면 그냥 속편하게 Vscode를 쓰는게 낫지 않을까 싶지만 몇년동안 정들었던 이맥스를 포기하기엔 아쉬움이 많이 남기에 Typescript 개발환경 구축 방법을 기록하고자 합니다. 이 글은 다음과 같은 내용을 기준으로 작성되었습니다.
emacs 27.</description></item><item><title>hugo에서 수학 수식 표현하기</title><link>https://yeongcheon.github.io/posts/2020-05-22-org-latex/</link><pubDate>Fri, 22 May 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-22-org-latex/</guid><description>이 글은 여기저기를 참고해서 작성되었습니다.
목표 이 문서에는 hugo + org mode + kaTex 를 조합해서 글을 작성하는 법을 설명합니다. hugo와 org mode는 이미 사용 중이라고 가정하고 hugo에 kaTex를 설정하는 법을 중점적으로 설명합니다.
Installation kaTex math.html 파일 생성 hugo에서 kaTex를 사용하려면 kaTex 모듈을 불러와야 합니다. /layouts/partials/math.html 파일을 생성하고 아래의 내용을 추가합니다. 혹시 이미 math.html 파일명을 사용중이라면 다른 파일명으로 바꿔서 생성해도 상관없어요.
1 2 3 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.</description></item><item><title>이맥스에서 특정 명령어 단축키로 지정하기</title><link>https://yeongcheon.github.io/posts/2020-05-18-emacs-configure-shortcut/</link><pubDate>Mon, 18 May 2020 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-18-emacs-configure-shortcut/</guid><description>이맥스에서 단축키를 직접 설정하는 법을 알아봅시다. 아는 게 없어서 여기 저기 참고를 많이 했어요.
기본 사용법 제일 단순한 예제를 먼저 살펴봅시다.
1 2 3 4 5 6 7 (global-set-key (kbd &amp;#34;M-a&amp;#34;) &amp;#39;backward-char) ; Alt+a (global-set-key (kbd &amp;#34;C-a&amp;#34;) &amp;#39;backward-char) ; Ctrl+a (global-set-key (kbd &amp;#34;C-c t&amp;#34;) &amp;#39;backward-char) ; Ctrl+c t (global-set-key (kbd &amp;#34;&amp;lt;f7&amp;gt; &amp;lt;f8&amp;gt;&amp;#34;) &amp;#39;whitespace-mode) ; F7 F8 딱히 설명이 필요 없을 정도로 간단하지만 굳이 첨언을 하자면 모든 buffer에서 사용할 수 있는 단축키를 지정할때는 위와 같이 사용합니다.</description></item><item><title>이맥스에서 여러 파일 찾아 바꾸기</title><link>https://yeongcheon.github.io/posts/2020-05-13-emacs-search-and-replace/</link><pubDate>Wed, 13 May 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-05-13-emacs-search-and-replace/</guid><description>대부분의 편집기에서 기본적으로 Ctrl + Shift + h 단축키에 해당하는 파일에서 찾기/바꾸기 기능을 emacs에서 사용해보자.
단축키 요약 구구절절 설명하기 전에 우선 단축키 요약본을 보자
1 2 3 4 C-x d (Dired mode 실행) Q (찾기/바꾸기 실행) Y (모든 변경 내역 승인) C-x s ! (모든 변경 내역 저장) step by step Dired mode 실행 C-x d : emacs에 기본적으로 탑재된 dired mode 를 실행해보자.</description></item><item><title>emacs에서 내가 사용중인 모든 패키지 업그레이드 하기</title><link>https://yeongcheon.github.io/posts/2020-03-08-emacs-all-package-upgrade/</link><pubDate>Sun, 08 Mar 2020 13:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-03-08-emacs-all-package-upgrade/</guid><description>업그레이드 방법 별거 없다. 글을 길게 쓸 생각(능력)은 없지만 이마저도 읽기 싫은 사람은 그냥 아래의 명령어만 쓰자.
1 2 3 M-x package-list-packages U x Step by Step 패키지 목록 화면으로 들어가기 M-x package-list-packages 를 입력하면 이맥스를 지원하는 다양한 종류의 패키지를 볼 수 있다.
이후 모든 과정들은 위에 보이는 패키지 목록 버퍼에서 진행된다.
내가 사용중인 모든 패키지 선택하기 패키지 목록 버퍼에서 알파벳 대문자 U 를 입력하면 현재 내가 사용중인 모든 패키지가 선택된다.</description></item><item><title>emacs에 $PATH 환경변수 인식 시키기</title><link>https://yeongcheon.github.io/posts/2020-01-08-emacs-path-setting/</link><pubDate>Wed, 08 Jan 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-01-08-emacs-path-setting/</guid><description>Intro 나는 우분투에서 이맥스를 즐겨쓰고 있다. 이맥스에서 고 언어를 종종 쓰는데 이번에 노트북을 셋팅하면서 문제가 발생했다. 일단 나는 이맥스에서 개발할 때 주로 lsp-mode를 바탕으로 개발환경을 구성하는데, 기본적인 설정은 문서를 보고 구성하면 무리없이 따라할 수 있다. 이번 글에서는 가이드대로 다 따라했는데 이맥스에서 gopls를 인식하지 못하던 문제에 대한 해결법을 기록하고자 한다.
문제 상황 lsp-mode를 사용하면 각 언어에 해당하는 language server를 이용해서 문법 점검, 자동완성, 디버거 연동 등등 IDE에서 흔하게 지원해주는 기능을 사용할 수 있게 해준다.</description></item><item><title>이맥스에서 lsp-mode를 이용해 자바 개발환경 셋팅하기</title><link>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</link><pubDate>Sun, 30 Jun 2019 21:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</guid><description>이맥스에서 자바 개발환경을 셋팅해보자. 우선 기본적으로 이맥스와 자바, gradle 등등은 설치가 되어있다고 가정한다. 포스트 작성 기준은 아래와 같다.
OS: ubuntu 18.04 LTS emacs: GNU Emacs 25.2.2 java: openjdk version &amp;#34;1.8.0_212&amp;#34; gradle: Gradle 4.10.2 이 포스트에선 개발환경 셋팅을 위해서 lsp-mode를 이용할 예정이다. 본격적으로 셋팅하기에 앞어서 lsp가 무엇인지 간단하게 한번 알아보자
LSP란? lsp는 Language Server Protocol의 약자이다(링크를 보는게 훨씬 도움이 된다). 간단히 말하자면 각 개발툴마다 제각각 다뤄왔던 자동완성, jump to definition 등등의 기능을 하나의 프로토콜로 표준화 하여 하나의 language server를 여러 개발툴에서 동일하게 사용할 수 있도록 하는 규약(프로토콜)을 의미한다.</description></item><item><title>이맥스 폰트, 세벌식 셋팅하기</title><link>https://yeongcheon.github.io/posts/2019-06-19-emacs-hangul/</link><pubDate>Wed, 19 Jun 2019 00:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2019-06-19-emacs-hangul/</guid><description> 아래의 내용을 .emacs 파일 안에 복붙해주자. 세벌식 버전은 최종이 아닌 390버전이다.
1 2 3 4 5 6 7 (set-fontset-font t &amp;#39;hangul (font-spec :family &amp;#34;D2Coding&amp;#34;)) (set-language-environment &amp;#34;Korean&amp;#34;) (prefer-coding-system &amp;#39;utf-8) (setq default-input-method &amp;#34;korean-hangul390&amp;#34;) (setq default-korean-keyboard &amp;#34;390&amp;#34;) (global-set-key (kbd &amp;#34;&amp;lt;S-kana&amp;gt;&amp;#34;) &amp;#39;toggle-input-method)</description></item><item><title>emacs에서 커서이동 없이 buffer 전체 복사하기</title><link>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</link><pubDate>Thu, 27 Sep 2018 21:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</guid><description>보편적인 현대 에디터에서 ctrl-a ctrl-c, 그러니까 현재 편집중인 파일의 모든 내용을 선택해서 복사하는 방법을 이맥스에서 사용하는 방법을 알아보자.
원래는 어떻게 쓰고 있었어요? 내가 원래 쓰던 방법은 커서를 버퍼 최상단으로 이동시킨 뒤 마크 세팅, 그리고 커서를 버퍼 마지막으로 이동시킨 뒤 복사하는 방법을 사용했었다. 단축키로 표현하자면 아래와 같다.
M - &amp;lt;, M - SPC, M - &amp;gt;, M - w
이 방법을 사용하면 복사 자체는 문제가 없지만 커서가 항상 버퍼 마지막에 위치하게 된다는 문제가 있다.</description></item><item><title>emacs에서 tslint 이용하기</title><link>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</link><pubDate>Fri, 21 Sep 2018 12:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</guid><description>나는 angular6를 이용해 웹 프로젝트를 진행하는걸 선호하는데 툴은 emacs를 주로 쓰고있다(OS는 ubuntu). vscode를 쓸까 했는데 그냥 이맥스가 좋아서(이유는 없다) 이맥스에 꾸역꾸역 개발환경을 구축했다. tide를 이용해서 환경을 구성했는데 tslint가 작동하지 않아서 잠깐 했던 삽질을 여기에 짤막하게 기록한다.
vscode는 그냥 되던데? 이게 내가 헤매게 된 가장 큰 이유다. vscode는 마켓플레이스에 그냥 tslint 패키지를 내려받으면 알아서 잘 동작한다. 개발자가 따로 뭐 설정하고 해줄 필요가 없다.(물론 tslint.json이 필요하지만 angular 프로젝트는 생성 시 지가 알아서 만들어준다.</description></item><item><title>emacs 명령어 목록</title><link>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</link><pubDate>Sun, 04 Feb 2018 00:30:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</guid><description>emacs 명령어 목록 이맥스를 쓰면서 개인적으로 유용하게 쓰고있는 명령어 리스트, 대부분 M-x를 누른 후 실행한다.
common grep : grep을 이용한 문자열 검색 (lgrep, rgrep도 있다.). 위키링크
find-name-dired : 특정 폴더 아래에서 지정된 파일이름 패턴과 동일한 목록을 뽑아 dired모드로 출력해주는 명령어. 폴더 아래의 모든 파일에서 replace 명령어를 수행할 때 유용하다. 링크
특정폴더 아래의 모든 파일(하위폴더 포함)에서 replace를 실행하는 방법
M-x find-name-dired 명령어 실행 후 폴더 지정, 파일패턴 지정 t를 눌러서 dired 모드에 있는 모든 목록을 선택 Q를 눌러서 Query-Replace in Files.</description></item><item><title>emacs 단축키 목록</title><link>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</link><pubDate>Tue, 26 Dec 2017 16:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</guid><description>emacs 단축키 목록 아래의 단축키들은 그누 이맥스 시작하기(한빛미디어) 책을 보면서 정리한 내용들입니다.
common C-x s : 모든 버퍼 저장(y, n 또는 !) C-x C-q : 버퍼 읽기/쓰기 전용상태로 swap C-x C-x : 선택영역 끝간 이동 C-t : 글자 순서 바꾸기(toggle) M-t : 단어 순서 바꾸기 C-x C-t : 문장 순서 바꾸기 M-c : 단어의 첫 글자만 대문자로 바꾸기 M-u : 한 단어를 대문자로 바꾼다. M-l : 한 단어를 소문자로 바꾼다.</description></item></channel></rss>