<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on YeongCheon Tech Blog</title>
    <link>https://yeongcheon.github.io/tags/emacs/</link>
    <description>Recent content in Emacs on YeongCheon Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-ko</language>
    <copyright>&amp;copy; Copyright 2019 YeongCheon</copyright>
    <lastBuildDate>Sun, 30 Jun 2019 21:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeongcheon.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>이맥스에서 lsp-mode를 이용해 자바 개발환경 셋팅하기</title>
      <link>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</link>
      <pubDate>Sun, 30 Jun 2019 21:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2019-06-31-emcs-lsp-java-setup/</guid>
      <description>이맥스에서 자바 개발환경을 셋팅해보자. 우선 기본적으로 이맥스와 자바, gradle 등등은 설치가 되어있다고 가정한다. 포스트 작성 기준은 아래와 같다.
 OS: ubuntu 18.04 LTS emacs: GNU Emacs 25.2.2 java: openjdk version &amp;quot;1.8.0_212&amp;quot; gradle: Gradle 4.10.2  이 포스트에선 개발환경 셋팅을 위해서 lsp-mode를 이용할 예정이다. 본격적으로 셋팅하기에 앞어서 lsp가 무엇인지 간단하게 한번 알아보자
LSP란? lsp는 Language Server Protocol의 약자이다(링크를 보는게 훨씬 도움이 된다). 간단히 말하자면 각 개발툴마다 제각각 다뤄왔던 자동완성, jump to definition 등등의 기능을 하나의 프로토콜로 표준화 하여 하나의 language server를 여러 개발툴에서 동일하게 사용할 수 있도록 하는 규약(프로토콜)을 의미한다.</description>
    </item>
    
    <item>
      <title>emacs에서 커서이동 없이 buffer 전체 복사하기</title>
      <link>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</link>
      <pubDate>Thu, 27 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-09-27-emacs-selectall/</guid>
      <description>보편적인 현대 에디터에서 ctrl-a ctrl-c, 그러니까 현재 편집중인 파일의 모든 내용을 선택해서 복사하는 방법을 이맥스에서 사용하는 방법을 알아보자.
원래는 어떻게 쓰고 있었어요? 내가 원래 쓰던 방법은 커서를 버퍼 최상단으로 이동시킨 뒤 마크 세팅, 그리고 커서를 버퍼 마지막으로 이동시킨 뒤 복사하는 방법을 사용했었다. 단축키로 표현하자면 아래와 같다.
M - &amp;lt;, M - SPC, M - &amp;gt;, M - w
이 방법을 사용하면 복사 자체는 문제가 없지만 커서가 항상 버퍼 마지막에 위치하게 된다는 문제가 있다.</description>
    </item>
    
    <item>
      <title>emacs에서 tslint 이용하기</title>
      <link>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</link>
      <pubDate>Fri, 21 Sep 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</guid>
      <description>나는 angular6를 이용해 웹 프로젝트를 진행하는걸 선호하는데 툴은 emacs를 주로 쓰고있다(OS는 ubuntu). vscode를 쓸까 했는데 그냥 이맥스가 좋아서(이유는 없다) 이맥스에 꾸역꾸역 개발환경을 구축했다. tide를 이용해서 환경을 구성했는데 tslint가 작동하지 않아서 잠깐 했던 삽질을 여기에 짤막하게 기록한다.
vscode는 그냥 되던데? 이게 내가 헤매게 된 가장 큰 이유다. vscode는 마켓플레이스에 그냥 tslint 패키지를 내려받으면 알아서 잘 동작한다. 개발자가 따로 뭐 설정하고 해줄 필요가 없다.(물론 tslint.json이 필요하지만 angular 프로젝트는 생성 시 지가 알아서 만들어준다.</description>
    </item>
    
    <item>
      <title>emacs 명령어 목록</title>
      <link>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</link>
      <pubDate>Sun, 04 Feb 2018 00:30:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-02-08-emacs-command/</guid>
      <description>emacs 명령어 목록  이맥스를 쓰면서 개인적으로 유용하게 쓰고있는 명령어 리스트, 대부분 M-x를 누른 후 실행한다.
 common  grep : grep을 이용한 문자열 검색 (lgrep, rgrep도 있다.). 위키링크 find-name-dired : 특정 폴더 아래에서 지정된 파일이름 패턴과 동일한 목록을 뽑아 dired모드로 출력해주는 명령어. 폴더 아래의 모든 파일에서 replace 명령어를 수행할 때 유용하다. 링크  특정폴더 아래의 모든 파일(하위폴더 포함)에서 replace를 실행하는 방법
 M-x find-name-dired 명령어 실행 후 폴더 지정, 파일패턴 지정 t를 눌러서 dired 모드에 있는 모든 목록을 선택 Q를 눌러서 Query-Replace in Files.</description>
    </item>
    
    <item>
      <title>emacs 단축키 목록</title>
      <link>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</link>
      <pubDate>Tue, 26 Dec 2017 16:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2017-12-26-emacs-shortcut/</guid>
      <description>emacs 단축키 목록  아래의 단축키들은 그누 이맥스 시작하기(한빛미디어) 책을 보면서 정리한 내용들입니다.
 common  C-x s : 모든 버퍼 저장(y, n 또는 !) C-x C-q : 버퍼 읽기/쓰기 전용상태로 swap C-x C-x : 선택영역 끝간 이동 C-t : 글자 순서 바꾸기(toggle) M-t : 단어 순서 바꾸기 C-x C-t : 문장 순서 바꾸기 M-c : 단어의 첫 글자만 대문자로 바꾸기 M-u : 한 단어를 대문자로 바꾼다. M-l : 한 단어를 소문자로 바꾼다.</description>
    </item>
    
  </channel>
</rss>