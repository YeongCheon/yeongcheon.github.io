<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gae - 태그 - 김영천 블로그</title><link>https://yeongcheon.github.io/tags/gae/</link><description>Gae - 태그 - 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sun, 11 Nov 2018 19:00:00 +0900</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/gae/" rel="self" type="application/rss+xml"/><item><title>appengine + springboot + kotlin + jpa + cloudsql 연동하기</title><link>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</link><pubDate>Sun, 11 Nov 2018 19:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</guid><description><![CDATA[<p>회사에서 새로 시작하는 API 서버 개발에 아래와 같은 환경을 적용하기로 했다.</p>
<ul>
<li>구동환경 : <a href="https://cloud.google.com/appengine/docs/standard/java/" target="_blank" rel="noopener noreffer ">Google App Engine Standard Environment</a></li>
<li>언어 : <a href="https://kotlinlang.org/" target="_blank" rel="noopener noreffer ">kotlin 1.3</a></li>
<li>framework : <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreffer ">Spring Boot 2.0.2.RELEASE</a></li>
<li>DB : <a href="https://cloud.google.com/sql/docs/mysql/" target="_blank" rel="noopener noreffer ">cloud sql(MySQL 5.7)</a></li>
<li>ORM : <a href="https://opentutorials.org/module/1281" target="_blank" rel="noopener noreffer ">hibernate/JPA</a></li>
<li>IDE: <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener noreffer ">IntelliJ Ultimate</a></li>
</ul>
<p>각각 놓고보면 다들 유명하고 널리 쓰이는 기술들이지만 얘들을 한꺼번에 적용한 가이드라인이 없어서 내가 직접 가이드를 작성해볼까 한다. A to Z 형식의 가이드는 아니고 셋팅 중 삽질을 크게 했던 부분 위주로 작성해보도록 하겠다.</p>]]></description></item><item><title>S2 library를 이용하여 가까운 위치의 사용자 찾기</title><link>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</link><pubDate>Sun, 05 Aug 2018 18:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</guid><description><![CDATA[<p>구글에서 제공하는 <a href="http://s2geometry.io/" target="_blank" rel="noopener noreffer ">S2</a> 라이브러리를 이용하여 현재 내 위치에서 가장 가까운 사용자 목록을 추출해보자. 서버 환경은 <a href="https://cloud.google.com/appengine/docs/" target="_blank" rel="noopener noreffer ">GAE</a>, <a href="https://cloud.google.com/appengine/docs/standard/go/" target="_blank" rel="noopener noreffer ">golang standard environment</a> 이다. <a href="https://blog.nobugware.com/post/2016/geo_db_s2_geohash_database/" target="_blank" rel="noopener noreffer ">이 글</a>을 참고했다.</p>
<h2 id="s2-라이브러리란">S2 라이브러리란?</h2>
<p>S2 라이브러리는 구글에서 비공식적으로(<a href="https://github.com/google/s2geometry#disclaimer" target="_blank" rel="noopener noreffer ">not an official</a>) 제공하는 구(球)형상 라이브러리이다(<del>번역기 발췌</del>). 기존의 대다수 라이브러리는 2차원 평면을 기준으로 좌표시스템을 구축하였지만 S2 라이브러리는 3차원 구를 기준으로 좌표계를 사용한다. 실제 지구는 평면보단 구(球)에 훨씬 가깝기 때문에 좀 더 정교하고 왜곡없는 지리 데이터베이스를 구축할 수 있다(<del>이 역시 번역기 발췌</del>).</p>]]></description></item><item><title>Google App Engine Image API 삽질 후기</title><link>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</link><pubDate>Sun, 10 Jun 2018 12:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</guid><description><![CDATA[<p>오늘은 GAE에서 제공하는 <a href="https://cloud.google.com/appengine/docs/standard/go/images/" target="_blank" rel="noopener noreffer ">Image API</a>를 사용하면서 겪은 어려움과 후기를 공유하고자 한다.</p>
<h2 id="요구사항">요구사항</h2>
<ul>
<li>GAE를 통해 업로드 된 이미지를 <a href="https://cloud.google.com/go/getting-started/using-cloud-storage" target="_blank" rel="noopener noreffer ">Google Cloud Storage</a>(이하 GCS)에 보관, 파일 관련 정보를 datastore에 별도로 저장한다(업로드 한 사용자, 업로드 파일명, 업로드 날짜 등등). 이 이미지를 웹사이트를 통해 서비스를 하고싶다. 이 이미지는 사이즈가 모두 제각각인데 DSLR로 찍은 수십메가짜리 이미지부터 조그마한 썸네일 이미지까지 크기가 천차만별이다.</li>
<li>동일한 이미지를 여러가지 사이즈로 출력해야 한다. 가령 DSLR로 찍은 이미지를 제공할 경우 우선 100px짜리 썸네일로 제공, 사용자가 썸네일을 클릭할 경우 이미지의 원본을 보여주고 싶다.</li>
<li>사용자가 주로 모바일을 통해 서비스를 사용할것으로 예측되는데 사용자의 디바이스마다 최적화 된 크기의 이미지를 제공하고 싶다.</li>
</ul>
<h2 id="고민">고민</h2>
<p>위와 같은 요구사항을 충족시키기 위해 인터넷을 꽤 오래 뒤지고 다녔다. 처음에는 <a href="http://engineering.vcnc.co.kr/2016/05/ondemand-image-resizing/" target="_blank" rel="noopener noreffer ">비트윈의 블로그 글</a>을 보고 이걸 따라하면 되겠다 싶었다. 하지만 문제가 있었다. 이미지 업로드를 GAE에서 구현하다보니 <a href="https://github.com/chai2010/webp" target="_blank" rel="noopener noreffer ">이미지를 webp 형태로 변환하는 golang 라이브러리</a>를 쓸 수가 없었다. 마찬가지로 온디멘드 리사이징도 GAE 위에서 돌리기엔 문제가 좀 있었다(내가 해결책을 못 찾은걸수도 있다). 결국 며칠동안 고민만 하고 코드를 한줄도 작성을 못해서 일단 무식한 방법으로라도 구현을 해보기로 했다. 그래서 아래와 같은 방법을 후보로 선정했다.</p>]]></description></item><item><title>datastore에서 projection query 실행 시 time.Time이 int64로 반환되는 문제 해결하기</title><link>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</link><pubDate>Sat, 12 May 2018 13:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</guid><description><![CDATA[<h2 id="요구사항">요구사항</h2>
<p>datastore에 내 프로필을 방문한 사용자의 ID와 방문시간을 각각 <code>string</code>, <code>time.Time</code> 형식으로 저장하고 있다. 구조체로 보면 다음과 같다.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-go">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="복사하기"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Visitor</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UserId</span> <span class="kt">string</span> <span class="c1">//조회한 프로필의 Id</span>
</span></span><span class="line"><span class="cl">	<span class="nx">VisitorId</span> <span class="kt">string</span> <span class="c1">//방문자 Id</span>
</span></span><span class="line"><span class="cl">	<span class="nx">VisitTime</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>이 데이터를 단순히 조회하면 한 사용자가 나를 여러번 방문할 경우 결과 리스트에 그 방문자가 여러번 출력된다. 나는 동일한 사용자가 여러번 반복해도 가장 최근에 방문한 기록만 보길 원했다. 즉 datastore에서 SQL 문법의 <strong>group by</strong>를 사용하고 싶었다.  내 요구사항을 SQL로 표현하자면 아래와 같다.</p>]]></description></item><item><title>Googlde App Engine(GAE) datastore index 관련 에러 해결하기</title><link>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</link><pubDate>Sun, 29 Apr 2018 21:30:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</guid><description><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>google app engine을 이용해 REST API를 작성하던 중 발생했던 datastore의 index 관련 이슈와 그 해결법에 대해 기록한다. <a href="https://cloud.google.com/datastore/docs/concepts/indexes" target="_blank" rel="noopener noreffer ">참고</a>, <a href="https://groups.google.com/forum/#!topic/google-appengine-java/zKjWwNjcTsE" target="_blank" rel="noopener noreffer ">여기도 참고</a></p>]]></description></item><item><title>Google App Engine(GAE)에서 go swagger server 실행하기</title><link>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</link><pubDate>Tue, 05 Dec 2017 17:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</guid><description><![CDATA[<h1 id="intro">Intro</h1>
<p>[지난번 포스트][last-post]에서 습득한 지식을 바탕으로 go-swagger를 이용해 작성한 서버를 <a href="https://cloud.google.com/appengine/" target="_blank" rel="noopener noreffer ">Google App Engine(이하 GAE)</a>에서 실행시켜보자.</p>]]></description></item></channel></rss>