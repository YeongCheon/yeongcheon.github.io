<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GAE on 꿀테크 블로그</title>
    <link>https://yeongcheon.github.io/tags/gae/</link>
    <description>Recent content in GAE on 꿀테크 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-ko</language>
    <copyright>&amp;copy; Copyright 2019 YeongCheon</copyright>
    <lastBuildDate>Sun, 11 Nov 2018 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yeongcheon.github.io/tags/gae/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>appengine &#43; springboot &#43; kotlin &#43; jpa &#43; cloudsql 연동하기</title>
      <link>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</link>
      <pubDate>Sun, 11 Nov 2018 19:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</guid>
      <description>회사에서 새로 시작하는 API 서버 개발에 아래와 같은 환경을 적용하기로 했다.
 구동환경 : Google App Engine Standard Environment 언어 : kotlin 1.3 framework : Spring Boot 2.0.2.RELEASE DB : cloud sql(MySQL 5.7) ORM : hibernate/JPA IDE: IntelliJ Ultimate  각각 놓고보면 다들 유명하고 널리 쓰이는 기술들이지만 얘들을 한꺼번에 적용한 가이드라인이 없어서 내가 직접 가이드를 작성해볼까 한다. A to Z 형식의 가이드는 아니고 셋팅 중 삽질을 크게 했던 부분 위주로 작성해보도록 하겠다.</description>
    </item>
    
    <item>
      <title>S2 library를 이용하여 가까운 위치의 사용자 찾기</title>
      <link>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</link>
      <pubDate>Sun, 05 Aug 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-08-01-s2-geometry/</guid>
      <description>구글에서 제공하는 S2 라이브러리를 이용하여 현재 내 위치에서 가장 가까운 사용자 목록을 추출해보자. 서버 환경은 GAE, golang standard environment 이다. 이 글을 참고했다.
S2 라이브러리란? S2 라이브러리는 구글에서 비공식적으로(not an official) 제공하는 구(球)형상 라이브러리이다(번역기 발췌). 기존의 대다수 라이브러리는 2차원 평면을 기준으로 좌표시스템을 구축하였지만 S2 라이브러리는 3차원 구를 기준으로 좌표계를 사용한다. 실제 지구는 평면보단 구(球)에 훨씬 가깝기 때문에 좀 더 정교하고 왜곡없는 지리 데이터베이스를 구축할 수 있다(이 역시 번역기 발췌).
추가로 geohash와 비교해보면 도움이 많이 된다.</description>
    </item>
    
    <item>
      <title>Google App Engine Image API 삽질 후기</title>
      <link>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</link>
      <pubDate>Sun, 10 Jun 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-06-10-gae-image-api/</guid>
      <description>오늘은 GAE에서 제공하는 Image API를 사용하면서 겪은 어려움과 후기를 공유하고자 한다.
요구사항  GAE를 통해 업로드 된 이미지를 Google Cloud Storage(이하 GCS)에 보관, 파일 관련 정보를 datastore에 별도로 저장한다(업로드 한 사용자, 업로드 파일명, 업로드 날짜 등등). 이 이미지를 웹사이트를 통해 서비스를 하고싶다. 이 이미지는 사이즈가 모두 제각각인데 DSLR로 찍은 수십메가짜리 이미지부터 조그마한 썸네일 이미지까지 크기가 천차만별이다. 동일한 이미지를 여러가지 사이즈로 출력해야 한다. 가령 DSLR로 찍은 이미지를 제공할 경우 우선 100px짜리 썸네일로 제공, 사용자가 썸네일을 클릭할 경우 이미지의 원본을 보여주고 싶다.</description>
    </item>
    
    <item>
      <title>datastore에서 projection query 실행 시 time.Time이 int64로 반환되는 문제 해결하기</title>
      <link>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</link>
      <pubDate>Sat, 12 May 2018 13:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-05-12-datastore-projection-error/</guid>
      <description>요구사항 datastore에 내 프로필을 방문한 사용자의 ID와 방문시간을 각각 string, time.Time 형식으로 저장하고 있다. 구조체로 보면 다음과 같다.
type Visitor struct { UserId string //조회한 프로필의 Id 	VisitorId string //방문자 Id 	VisitTime time.Time } 이 데이터를 단순히 조회하면 한 사용자가 나를 여러번 방문할 경우 결과 리스트에 그 방문자가 여러번 출력된다. 나는 동일한 사용자가 여러번 반복해도 가장 최근에 방문한 기록만 보길 원했다. 즉 datastore에서 SQL 문법의 group by를 사용하고 싶었다.</description>
    </item>
    
    <item>
      <title>Googlde App Engine(GAE) datastore index 관련 에러 해결하기</title>
      <link>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</link>
      <pubDate>Sun, 29 Apr 2018 21:30:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2018-04-29-gae-datastore-indexes/</guid>
      <description>들어가며 google app engine을 이용해 REST API를 작성하던 중 발생했던 datastore의 index 관련 이슈와 그 해결법에 대해 기록한다. 참고, 여기도 참고
에러발생 상황 내 프로필을 조회한 사람들의 목록을 반환해주는 API를 작성했다. 코드는 딱히 별거 없고 그냥 datastore에 있는 데이터들을 불러오는 내용이다. 핵심코드는 아래와 같다.
q := datastore.NewQuery(userDao.VisitorEntity).Filter(&amp;#34;UserId=&amp;#34;, userId).Order(&amp;#34;-VisitTime&amp;#34;) UserId 필드의 값을 기준으로 필터링을 하고 VisitTime을 최근순으로 정렬하는 간단한 코드다. 위 쿼리문을 베이스로 한 API는 로컬테스트는 무사히 통과하고 배포까지 정상적으로 완료, 이 후 클라우드에 올라간 API를 테스트 했는데 다음과 같은 에러로그를 내뿜었다.</description>
    </item>
    
    <item>
      <title>Google App Engine(GAE)에서 go swagger server 실행하기</title>
      <link>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</link>
      <pubDate>Tue, 05 Dec 2017 17:00:00 +0900</pubDate>
      
      <guid>https://yeongcheon.github.io/posts/2017-12-05-go-swagger-with-gae/</guid>
      <description>Intro [지난번 포스트][last-post]에서 습득한 지식을 바탕으로 go-swagger를 이용해 작성한 서버를 Google App Engine(이하 GAE)에서 실행시켜보자.
 spec을 이용해 서버코드 생성하기 [지난번 포스트][last-post]에서 작성한 swagger.yaml을 이용해 서버코드를 생성해보자. swagger.yaml 내용은 아래와 같다.
swagger: &amp;#34;2.0&amp;#34; info: description: hello go swagger title: hello world application version: 1.0.0 produces: - application/json consumes: - application/json schemes: - http paths: /: get: responses: 200: description: list the todo operations schema: type: array description: &amp;#34;result : helloworld&amp;#34; items: $ref: &amp;#34;#/definitions/item&amp;#34; definitions: item: type: object required: - result properties: result: type: string swagger.</description>
    </item>
    
  </channel>
</rss>