<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RouteReuseStrategy on 김영천 블로그</title><link>https://yeongcheon.github.io/tags/routereusestrategy/</link><description>Recent content in RouteReuseStrategy on 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>&amp;copy; Copyright 2020 YeongCheon</copyright><lastBuildDate>Sun, 03 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/routereusestrategy/index.xml" rel="self" type="application/rss+xml"/><item><title>angular route reuse strategy</title><link>https://yeongcheon.github.io/posts/2021-10-03-angular-reuse-strategy/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-10-03-angular-reuse-strategy/</guid><description>Intro 웹앱을 개발하다보면 list-&amp;gt;detail 패턴의 구조를 흔하게 작성하게 됩니다. list-detail 패턴이란 목록(list)에서 원하는 컨텐츠를 탐색 후 해당 컨텐츠의 상세한 정보를 보는 화면(detail)로 이동하는 방식을 말합니다. 이 때 detail 화면에서 뒤로 가기를 이용해 목록 화면으로 돌아올 경우 Angular는 해당 화면을 구성하는 컴포넌트를 처음부터 다시 생성(ngOnInit 실행)합니다. 이럴 경우엔 다음과 같은 문제가 발생합니다.
컴포넌트를 다시 생성하기 때문에 성능상 좋지 못합니다. 컴포넌트를 다시 그리기 때문에 로딩 화면이 보여지거나 스크롤 위치를 기억하지 등 유저 경험에 악영향을 미칩니다.</description></item></channel></rss>