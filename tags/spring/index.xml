<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on 김영천 블로그</title><link>https://yeongcheon.github.io/tags/spring/</link><description>Recent content in spring on 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>&amp;copy; Copyright 2020 YeongCheon</copyright><lastBuildDate>Sun, 26 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Pointcut 표현식에 부모 클래스 표현하기</title><link>https://yeongcheon.github.io/posts/2021-12-26-spring-aop-superclass/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>https://yeongcheon.github.io/posts/2021-12-26-spring-aop-superclass/</guid><description>들어가며 이 문서는 기본적으로 Spring AOP에 대해 사전 지식이 있다는 전제 하에 작성되었습니다.
요구사항 Fruit 클래스를 상속받는 Apple, Banana 클래스가 있습니다. Apple 또는 Banana 클래스를 반환하는 모든 메서드 마지막에 로그를 남기는 기능을 작성하고자 합니다.
Basic Code Model 1 2 3 4 5 6 7 8 9 10 11 12 13 package dev.yeongcheon.example.aop.model abstract class Fruit( val name: String ) class Apple: Fruit( name = &amp;#34;apple&amp;#34; ) class Banana: Fruit( name = &amp;#34;banana&amp;#34; ) Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package dev.</description></item><item><title>코틀린으로 작성된 스프링 기반 API 트랜잭션 rollback 관리</title><link>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</link><pubDate>Tue, 08 Sep 2020 23:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</guid><description>Kotlin + Spring boot을 조합해 작성한 REST API에서 CheckedException이 발생해도 Rollback이 되지 않는 문제와 그 해결법에 대해 알아봅시다. 이 글은 Spring, RDB, JPA에 대한 기본적인 이해가 있다는 가정 하에 작성되었습니다.
Checked Exception? 우선 Checked Exception에 대해서 알아봅시다. Kotlin에서 Exception은 크게 두가지로 나눌 수 있습니다.
Checked Exception: 컴파일 시 체크되는 예외입니다. Runtime Exception에 해당되지 않는 모든 Exception은 Checked Exception이 됩니다.
Runtime(Unchecked) Exception: 컴파일 단계에서 체크되지 않으며(Unchecked) 실행 중(Runtime) 발생하는 예외입니다(Ex: IndexOutOfBoundsException, IllegalArgumentException, etc…).</description></item><item><title>appengine + springboot + kotlin + jpa + cloudsql 연동하기</title><link>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</link><pubDate>Sun, 11 Nov 2018 19:00:00 +0900</pubDate><guid>https://yeongcheon.github.io/posts/2018-11-11-springboot-jpa-cloudsql-connect/</guid><description>회사에서 새로 시작하는 API 서버 개발에 아래와 같은 환경을 적용하기로 했다.
구동환경 : Google App Engine Standard Environment 언어 : kotlin 1.3 framework : Spring Boot 2.0.2.RELEASE DB : cloud sql(MySQL 5.7) ORM : hibernate/JPA IDE: IntelliJ Ultimate 각각 놓고보면 다들 유명하고 널리 쓰이는 기술들이지만 얘들을 한꺼번에 적용한 가이드라인이 없어서 내가 직접 가이드를 작성해볼까 한다. A to Z 형식의 가이드는 아니고 셋팅 중 삽질을 크게 했던 부분 위주로 작성해보도록 하겠다.</description></item></channel></rss>