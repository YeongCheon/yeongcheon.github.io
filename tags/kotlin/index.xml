<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Kotlin - 태그 - 김영천 블로그</title><link>https://yeongcheon.github.io/tags/kotlin/</link><description>Kotlin - 태그 - 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 08 Sep 2020 23:00:00 +0900</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/kotlin/" rel="self" type="application/rss+xml"/><item><title>코틀린으로 작성된 스프링 기반 API 트랜잭션 rollback 관리</title><link>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</link><pubDate>Tue, 08 Sep 2020 23:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-09-06-kotlin-spring-exception-rollback/</guid><description>&lt;p>
Kotlin + Spring boot을 조합해 작성한 REST API에서 &lt;a href="https://kotlinlang.org/docs/reference/exceptions.html#checked-exceptions">CheckedException&lt;/a>이 발생해도 Rollback이 되지 않는 문제와 그 해결법에 대해 알아봅시다. 이 글은 Spring, RDB, JPA에 대한 기본적인 이해가 있다는 가정 하에 작성되었습니다.&lt;/p></description></item><item><title>kotlin에서 조건문(blcok문)변수 제대로 쓰기</title><link>https://yeongcheon.github.io/posts/2020-01-26-kotlin-setting-condition-variable/</link><pubDate>Sun, 26 Jan 2020 13:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-01-26-kotlin-setting-condition-variable/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
기본 문법
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
if 사용법
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>kotlin에서는 if, when, try catch문을 활용해서 변수에 값을 편하게 할당할 수 있다. 예를 들어서 자바에서 아래와 같이 쓰는 문법이 있다고 해보자.</p>]]></description></item><item><title>JPA OneToMany 필드의 StackOverflowError</title><link>https://yeongcheon.github.io/posts/2019-11-14-jpa-one-to-many-collection-set/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2019-11-14-jpa-one-to-many-collection-set/</guid><description><![CDATA[<p>
JPA를 사용하다 보면 StackOverflow 에러를 종종 만날 수 있다. 이 글에서는 필드 타입이 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html">Set</a>인 Collection 타입에 아이템을 추가할 경우 StackVoerflow 에러가 발생하는 원인과 그 해결법에 대해 알아보자.</p>
<p>
`hashcode`, `equals` 메서드와 관계된 이야기이다.</p>]]></description></item><item><title>jackson을 이용해 json 변환 시 JPA entity의 id값만 추출하기</title><link>https://yeongcheon.github.io/posts/2019-03-01-jpa-jackson/</link><pubDate>Fri, 01 Mar 2019 19:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2019-03-01-jpa-jackson/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
들어가며
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>REST API 서버를 java언어에서 사용되는 대표적인 json(또는 xml, yaml, etc…) 라이브러리인 <a href="https://github.com/FasterXML/jackson">jackson</a> 은 kotlin에서도 사용이 가능하다. 
  JPA를 사용하다보면 entity를 json형식으로 반환할 때 해당 entity가 다른 entity를 필드로 참조하고 있을 경우 참조하는 entity의 id값만을 반환하고 싶을 경우가 있다.
  이 문제를 jackson을 이용해  json형식으로 이쁘게 변환하는 법을 알아보자.</p>]]></description></item></channel></rss>