<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Angular - 태그 - 김영천 블로그</title><link>https://yeongcheon.github.io/tags/angular/</link><description>Angular - 태그 - 김영천 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sun, 03 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yeongcheon.github.io/tags/angular/" rel="self" type="application/rss+xml"/><item><title>angular route reuse strategy</title><link>https://yeongcheon.github.io/posts/2021-10-03-angular-reuse-strategy/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2021-10-03-angular-reuse-strategy/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Intro
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>웹앱을 개발하다보면 list-&gt;detail 패턴의 구조를 흔하게 작성하게 됩니다. list-detail 패턴이란 목록(list)에서 원하는 컨텐츠를 탐색 후 해당 컨텐츠의 상세한 정보를 보는 화면(detail)로 이동하는 방식을 말합니다. 이 때 detail 화면에서 <strong>뒤로 가기를 이용해 목록 화면으로 돌아올 경우 Angular는 해당 화면을 구성하는 컴포넌트를 처음부터 다시 생성(<code>ngOnInit</code> 실행)합니다.</strong> 이럴 경우엔 다음과 같은 문제가 발생합니다.</p>]]></description></item><item><title>angular universal 메모리 누수 개선하기 - 003</title><link>https://yeongcheon.github.io/posts/2021-07-23-angular-ssr-chrome-inspect/</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2021-07-23-angular-ssr-chrome-inspect/</guid><description><![CDATA[<p>
앵귤러 기반 웹사이트를 개발하면서 발생한 메모리 누수의 다양한 원인들과 그 해결법을 기록합니다.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
들어가며
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
  이번 문서에서는 Chrome Inspect를 이용해서 서버 사이드 렌더링 시 발생하는 메모리 누수를 확인하고 이를 수정하는 방법에 대해 알아봅니다. 이 문서는 <a href="https://angular.kr/guide/universal">Angular Universal</a>에 대해 기본적인 이해가 있다는 것을 전제로 작성되었습니다.</p>]]></description></item><item><title>angular universal 메모리 누수 개선하기 - 002</title><link>https://yeongcheon.github.io/posts/2021-07-15-angular-memory-leak002/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2021-07-15-angular-memory-leak002/</guid><description><![CDATA[<p>
앵귤러 기반 웹사이트를 개발하면서 발생한 메모리 누수의 다양한 원인들과 그 해결법을 기록합니다.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
들어가며
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
  이번 문서에서는 <a href="https://rxjs.dev/">rxjs</a> 쓰다보면 흔하게 접할 수 있는 메모리 누수에 대해 알아보고 <a href="https://eslint.org/">eslint</a>와 <a href="https://github.com/ngneat/until-destroy">until-destroy</a>를 이용해 메모리 누수를 원천적으로 막을 수 있는 방법에 대해 알아봅시다. 이 문서는 rxjs, eslint에 대해 기본적인 이해가 있다는 것을 전제로 작성되었습니다.</p>]]></description></item><item><title>angular universal 메모리 누수 개선하기 - 001</title><link>https://yeongcheon.github.io/posts/2021-07-11-angular-memory-leak001/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2021-07-11-angular-memory-leak001/</guid><description><![CDATA[<p>
앵귤러 기반 웹사이트를 개발하면서 발생한 메모리 누수의 다양한 원인들과 그 해결법을 기록합니다.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
들어가며
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
  부끄럽지만 앵귤러 기반 웹 프로젝트를 진행하며 메모리 누수같은 문제는 사실 전혀 신경을 안(<del>못</del>)쓰고 있었습니다. 어차피 사용자 브라우저에서 돌아가니깐 새로고침만 하면 해당 페이지의 메모리는 초기화될테니 속도만 느리지 않다면 된다는 생각이었지요. 당연히 이는 크게 잘못된 생각이었고 <strong>서버사이드 렌더링(이하 SSR)를 적용하면서 문제는 상당히 심각하게 흘러갑니다.</strong> 지금부터 제가 개발하면서 만나본 다양한 메모리 누수(memory leak) 문제를 살펴보고 그 해결법을 기록하고자 합니다.</p>]]></description></item><item><title>구글 앱엔진에 ssr angular app 배포하기</title><link>https://yeongcheon.github.io/posts/2020-04-26-angular-ssr-with-appengine/</link><pubDate>Sun, 26 Apr 2020 16:00:00 +0900</pubDate><author>yeongcheon</author><guid>https://yeongcheon.github.io/posts/2020-04-26-angular-ssr-with-appengine/</guid><description><![CDATA[<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
들어가며
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>이 문서는 기본적으로 <a href="https://angular.io/guide/universal">앵귤러 공식 SSR 가이드</a>를 따라하며 학습한 내용을 정리한 것입니다. SSR에 대해 궁금하시다면 <a href="https://velog.io/@zansol/%25ED%2599%2595%25EC%259D%25B8%25ED%2595%2598%25EA%25B8%25B0-%25EC%2584%259C%25EB%25B2%2584%25EC%2582%25AC%25EC%259D%25B4%25EB%2593%259C%25EB%25A0%258C%25EB%258D%2594%25EB%25A7%2581SSR-%25ED%2581%25B4%25EB%259D%25BC%25EC%259D%25B4%25EC%2596%25B8%25ED%258A%25B8%25EC%2582%25AC%25EC%259D%25B4%25EB%2593%259C%25EB%25A0%258C%25EB%258D%2594%25EB%25A7%2581CSR">이 링크</a>를 참고하세요. 이 문서는 angular, appEngine을 사용할 줄 아는 사람을 대상으로 작성되었습니다.</p>]]></description></item><item><title>emacs에서 tslint 이용하기</title><link>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</link><pubDate>Fri, 21 Sep 2018 12:00:00 +0900</pubDate><author>xxxx</author><guid>https://yeongcheon.github.io/posts/2018-09-21-tslint-in-emacs/</guid><description><![CDATA[<p>나는 angular6를 이용해 웹 프로젝트를 진행하는걸 선호하는데 툴은 emacs를 주로 쓰고있다(OS는 ubuntu). vscode를 쓸까 했는데 그냥 이맥스가 좋아서(이유는 없다) 이맥스에 꾸역꾸역 개발환경을 구축했다. <a href="https://github.com/ananthakumaran/tide" target="_blank" rel="noopener noreffer ">tide</a>를 이용해서 환경을 구성했는데 <a href="https://github.com/ananthakumaran/tide" target="_blank" rel="noopener noreffer ">tslint</a>가 작동하지 않아서 잠깐 했던 삽질을 여기에 짤막하게 기록한다.</p>]]></description></item></channel></rss>